import streamlit as st
import pandas as pd
import numpy as np
from typing import Dict, List, Optional, Tuple
import yaml
import io
import base64
from datetime import datetime
import json

current_year = datetime.now().year

# Configuraci√≥n de p√°gina
st.set_page_config(
    page_title="AESVAL - Sistema de Tasaci√≥n Inteligente ECO 805",
    page_icon="üè†",
    layout="wide",
    initial_sidebar_state="expanded"
)

def get_image_base64(path):
    """Carga im√°genes y las convierte a base64"""
    import os
    possible_paths = [
        f"/app/{path}",           
        f"/app/assets/{path.split('/')[-1]}", 
        f"./{path}",
        f"assets/{path}",
    ]
    
    for img_path in possible_paths:
        try:
            if os.path.exists(img_path):
                with open(img_path, "rb") as image_file:
                    return base64.b64encode(image_file.read()).decode()
        except:
            continue
    return None

class ModeloTasacion:
    """Clase para gestionar los modelos de tasaci√≥n"""
    
    def __init__(self, config: Dict):
        self.config = config
        self.modelos = config.get('modelos', {})
        self.factores = config.get('factores_correccion', {})
    
    def obtener_modelo_por_poblacion(self, poblacion: int) -> Optional[Dict]:
        """Obtiene el modelo adecuado seg√∫n el tama√±o de poblaci√≥n"""
        if poblacion < 10000:
            return self.modelos.get('testigos_menos_10000')
        elif 10000 <= poblacion < 50000:
            return self.modelos.get('testigos_10000_50000')
        elif 50000 <= poblacion < 200000:
            return self.modelos.get('testigos_50000_200000')
        else:
            return self.modelos.get('testigos_mas_200000')
    
    def calcular_valor_m2(self, datos: Dict, modelo: Dict) -> Tuple[float, Dict]:
        """Calcula el valor por m¬≤ usando el modelo especificado"""
        coef = modelo['coeficientes']
        contribuciones = {}
        
        # Valor base del municipio (intercepto)
        valor_base = coef['intercepto']
        contribuciones['valor_base'] = valor_base
        
        # Aplicar coeficientes seg√∫n variables
        if datos.get('vivienda_nueva') and 'vivienda_nueva' in coef:
            contrib = coef['vivienda_nueva']
            valor_base += contrib
            contribuciones['vivienda_nueva'] = contrib
        
        if 'superficie' in coef and datos.get('superficie'):
            contrib = coef['superficie'] * datos['superficie']
            valor_base += contrib
            contribuciones['superficie'] = contrib
        
        if datos.get('calefaccion') and 'calefaccion' in coef:
            contrib = coef['calefaccion']
            valor_base += contrib
            contribuciones['calefaccion'] = contrib
        
        if 'dormitorios' in coef and datos.get('dormitorios'):
            contrib = coef['dormitorios'] * datos['dormitorios']
            valor_base += contrib
            contribuciones['dormitorios'] = contrib
        
        if 'banos' in coef and datos.get('banos'):
            contrib = coef['banos'] * datos['banos']
            valor_base += contrib
            contribuciones['banos'] = contrib
        
        if datos.get('calidad_alta') and 'calidad_alta' in coef:
            contrib = coef['calidad_alta']
            valor_base += contrib
            contribuciones['calidad_alta'] = contrib
        
        if datos.get('ascensor') and 'ascensor' in coef:
            contrib = coef['ascensor']
            valor_base += contrib
            contribuciones['ascensor'] = contrib
        
        if 'planta' in coef and datos.get('planta'):
            contrib = coef['planta'] * datos['planta']
            valor_base += contrib
            contribuciones['planta'] = contrib
        
        return max(0, valor_base), contribuciones
    
    def calcular_tasa_descuento(self, datos: Dict) -> Tuple[float, Dict]:
        """Calcula la tasa de descuento usando el modelo correspondiente"""
        modelo = self.modelos.get('tasa_descuento', {})
        coef = modelo.get('coeficientes', {})
        contribuciones = {}
        
        tasa_base = coef.get('intercepto', 0.05)
        contribuciones['tasa_base'] = tasa_base
        
        # Aplicar coeficientes
        if 'superficie' in coef and datos.get('superficie'):
            contrib = coef['superficie'] * datos['superficie']
            tasa_base += contrib
            contribuciones['superficie'] = contrib
        
        if 'antiguedad' in coef and datos.get('antiguedad'):
            contrib = coef['antiguedad'] * datos['antiguedad']
            tasa_base += contrib
            contribuciones['antiguedad'] = contrib
        
        if 'banos' in coef and datos.get('banos'):
            contrib = coef['banos'] * datos['banos']
            tasa_base += contrib
            contribuciones['banos'] = contrib
        
        if 'dormitorios' in coef and datos.get('dormitorios'):
            contrib = coef['dormitorios'] * datos['dormitorios']
            tasa_base += contrib
            contribuciones['dormitorios'] = contrib
        
        if datos.get('calidad_alta') and 'calidad_alta' in coef:
            contrib = coef['calidad_alta']
            tasa_base += contrib
            contribuciones['calidad_alta'] = contrib
        
        if datos.get('estado_alto') and 'estado_alto' in coef:
            contrib = coef['estado_alto']
            tasa_base += contrib
            contribuciones['estado_alto'] = contrib
        
        if datos.get('ascensor') and 'ascensor' in coef:
            contrib = coef['ascensor']
            tasa_base += contrib
            contribuciones['ascensor'] = contrib
        
        if 'planta' in coef and datos.get('planta'):
            contrib = coef['planta'] * datos['planta']
            tasa_base += contrib
            contribuciones['planta'] = contrib
        
        return max(0.01, min(0.15, tasa_base)), contribuciones

def cargar_configuracion() -> Dict:
    """Carga la configuraci√≥n de modelos desde YAML"""
    try:
        with open('/app/config/models.yaml', 'r', encoding='utf-8') as file:
            return yaml.safe_load(file)
    except Exception as e:
        st.error(f"Error cargando configuraci√≥n: {e}")
        return {}

def inicializar_session_state():
    """Inicializa variables de session state"""
    if 'config' not in st.session_state:
        st.session_state.config = cargar_configuracion()
    if 'modelo' not in st.session_state:
        st.session_state.modelo = ModeloTasacion(st.session_state.config)
    if 'resultados_individuales' not in st.session_state:
        st.session_state.resultados_individuales = []

def mostrar_header():
    """Header profesional con logos"""
    logo_aesval = get_image_base64("assets/aesval.png")
    logo_ctic = get_image_base64("assets/CTIC.png")
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col1:
        if logo_aesval:
            st.markdown(f'<div style="text-align: center;"><img src="data:image/png;base64,{logo_aesval}" width="150"></div>', unsafe_allow_html=True)
        else:
            st.markdown('<div style="text-align: center; background: linear-gradient(135deg, #1f77b4, #2e8bc0); padding: 30px; border-radius: 10px; color: white;"><h3>üè¢ AESVAL</h3><p style="font-size: 0.8rem;">Entidad Tasadora</p></div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div style='text-align: center; padding: 1rem 0;'>
            <h1 style='color: #1f77b4; margin-bottom: 0.5rem; font-size: 2.5rem;'>
                üè† SISTEMA DE TASACI√ìN ECO 805
            </h1>
            <h3 style='color: #666; margin-top: 0; font-weight: 300;'>
                Modelos Econom√©tricos Basados en An√°lisis de Regresi√≥n
            </h3>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        if logo_ctic:
            st.markdown(f'<div style="text-align: center;"><img src="data:image/png;base64,{logo_ctic}" width="120"></div>', unsafe_allow_html=True)
        else:
            st.markdown('<div style="text-align: center; background: linear-gradient(135deg, #ff6b6b, #ff8e8e); padding: 30px; border-radius: 10px; color: white;"><h3>üî¨ CTIC</h3><p style="font-size: 0.8rem;">Centro Tecnol√≥gico</p></div>', unsafe_allow_html=True)
    
    st.markdown("---")

def mostrar_sidebar():
    """Sidebar con informaci√≥n del sistema"""
    with st.sidebar:
        st.markdown("""
        <div style='background: linear-gradient(135deg, #1f77b4, #2e8bc0); padding: 2rem; border-radius: 10px; color: white; margin-bottom: 2rem;'>
            <h3 style='color: white; margin-bottom: 1rem;'>üìä Sistema AESVAL ECO 805</h3>
            <p style='margin-bottom: 0; font-size: 0.9rem;'>
                Plataforma oficial para la tasaci√≥n inteligente de inmuebles seg√∫n normativa ECO 805
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("### ‚ÑπÔ∏è Informaci√≥n del Sistema")
        config = st.session_state.config
        st.info(f"""
        **Versi√≥n:** {config.get('version', '2.0')}  
        **Actualizaci√≥n:** {config.get('fecha_actualizacion', '2025-01-10')}  
        **Modelo:** ECO 805 - An√°lisis Econom√©trico  
        **Base de datos:** 205,000+ testigos
        """)
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("R¬≤ Promedio", "82%")
        with col2:
            st.metric("Precisi√≥n", "97.2%")
        
        st.markdown("---")
        st.markdown("### üìà Modelos Disponibles")
        st.write("‚Ä¢ Municipios < 10,000 hab")
        st.write("‚Ä¢ Municipios 10,000-50,000 hab")  
        st.write("‚Ä¢ Municipios 50,000-200,000 hab")
        st.write("‚Ä¢ Municipios > 200,000 hab")
        st.write("‚Ä¢ Modelo Tasa Descuento")
        
        st.markdown("---")
        st.markdown(f"""
        <div style='text-align: center; color: #666; font-size: 0.8rem; padding: 1rem 0;'>
            <p>¬© {current_year} AESVAL - CTIC</p>
            <p>Sistema de Tasaci√≥n Inteligente</p>
        </div>
        """, unsafe_allow_html=True)

def obtener_poblacion_municipio(municipio: str) -> int:
    """Obtiene poblaci√≥n aproximada del municipio (datos de ejemplo)"""
    poblaciones = {
        "Gij√≥n": 268000,
        "Oviedo": 215000,
        "Avil√©s": 76000,
        "Mieres": 38000,
        "Langreo": 39000,
        "Siero": 52000,
        "Castrill√≥n": 22000,
        "Corvera": 16000,
        "Carre√±o": 10500,
        "Goz√≥n": 10500,
        "Villaviciosa": 14500,
        "Sariego": 1300,
        "Bimenes": 1700,
        "Nava": 5200,
        "Cabranes": 800,
        "Pilo√±a": 7200
    }
    return poblaciones.get(municipio, 50000)

def pagina_tasacion_individual():
    """Pesta√±a para tasaci√≥n individual con modelos reales"""
    st.header("üìä Tasaci√≥n Individual - Modelo ECO 805")
    
    with st.container():
        st.info("""
        üí° **Complete los datos del inmueble para obtener una tasaci√≥n precisa basada en modelos econom√©tricos 
        desarrollados con an√°lisis de regresi√≥n m√∫ltiple sobre 205,000+ observaciones.**
        """)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        with st.container():
            st.subheader("üèõÔ∏è Datos del Inmueble")
            
            col1_1, col1_2 = st.columns(2)
            
            with col1_1:
                municipio = st.selectbox(
                    "Municipio",
                    ["Gij√≥n", "Oviedo", "Avil√©s", "Mieres", "Langreo", "Siero", "Castrill√≥n", 
                     "Corvera", "Carre√±o", "Goz√≥n", "Villaviciosa", "Sariego", "Bimenes", "Nava", "Cabranes", "Pilo√±a"],
                    help="Seleccione el municipio donde se ubica el inmueble"
                )
                
                superficie = st.number_input(
                    "Superficie construida (m¬≤)", 
                    min_value=20.0, 
                    max_value=1000.0,
                    value=80.0,
                    step=0.5,
                    help="Superficie total construida en metros cuadrados"
                )
                
                antiguedad = st.number_input(
                    "Antig√ºedad (a√±os)", 
                    min_value=0, 
                    max_value=200,
                    value=15,
                    help="A√±os desde la construcci√≥n del inmueble"
                )
                
                dormitorios = st.number_input(
                    "N√∫mero de dormitorios",
                    min_value=1,
                    max_value=10,
                    value=3,
                    help="N√∫mero total de dormitorios"
                )
            
            with col1_2:
                banos = st.number_input(
                    "N√∫mero de ba√±os",
                    min_value=1,
                    max_value=6,
                    value=2,
                    help="N√∫mero total de ba√±os"
                )
                
                planta = st.number_input(
                    "Planta",
                    min_value=0,
                    max_value=20,
                    value=2,
                    help="Planta en la que se ubica el inmueble"
                )
                
                calefaccion = st.checkbox("Calefacci√≥n", value=True, help="¬øTiene sistema de calefacci√≥n?")
                ascensor = st.checkbox("Ascensor", value=True, help="¬øEl edificio tiene ascensor?")
                vivienda_nueva = st.checkbox("Vivienda nueva (<5 a√±os)", value=False, help="Menos de 5 a√±os de antig√ºedad")
                calidad_alta = st.checkbox("Calidad constructiva alta", value=False, help="Calidad de materiales y acabados alta")
                
                estado_conservacion = st.select_slider(
                    "Estado de conservaci√≥n",
                    options=["Muy deficiente", "Deficiente", "Regular", "Bueno", "Muy bueno", "Excelente"],
                    value="Bueno",
                    help="Estado general de conservaci√≥n del inmueble"
                )
    
    with col2:
        with st.container():
            st.subheader("üéØ Calcular Tasaci√≥n")
            
            if st.button("üìà Calcular Valor y Tasa", type="primary", width=True):
                with st.spinner("Calculando tasaci√≥n usando modelos econom√©tricos..."):
                    # Obtener datos para el modelo
                    poblacion = obtener_poblacion_municipio(municipio)
                    modelo_valor = st.session_state.modelo.obtener_modelo_por_poblacion(poblacion)
                    
                    if not modelo_valor:
                        st.error("‚ùå No se encontr√≥ modelo para el municipio seleccionado")
                        return
                    
                    # Preparar datos
                    datos_inmueble = {
                        'superficie': superficie,
                        'antiguedad': antiguedad,
                        'dormitorios': dormitorios,
                        'banos': banos,
                        'planta': planta,
                        'calefaccion': calefaccion,
                        'ascensor': ascensor,
                        'vivienda_nueva': vivienda_nueva,
                        'calidad_alta': calidad_alta,
                        'estado_alto': estado_conservacion in ["Muy bueno", "Excelente"]
                    }
                    
                    # Calcular valor por m¬≤
                    valor_m2, contrib_valor = st.session_state.modelo.calcular_valor_m2(datos_inmueble, modelo_valor)
                    valor_total = valor_m2 * superficie
                    
                    # Calcular tasa de descuento
                    tasa_descuento, contrib_tasa = st.session_state.modelo.calcular_tasa_descuento(datos_inmueble)
                    
                    # Mostrar resultados
                    st.success("‚úÖ Tasaci√≥n calculada correctamente")
                    
                    # M√©tricas principales
                    col_res1, col_res2, col_res3 = st.columns(3)
                    with col_res1:
                        st.metric("Valor por m¬≤", f"‚Ç¨ {valor_m2:,.0f}")
                    with col_res2:
                        st.metric("Valor Total", f"‚Ç¨ {valor_total:,.0f}")
                    with col_res3:
                        st.metric("Tasa Descuento", f"{tasa_descuento:.2%}")
                    
                    # Informaci√≥n del modelo usado
                    st.info(f"**Modelo aplicado:** {modelo_valor['nombre']} (R¬≤ = {modelo_valor['r2']})")
                    
                    # Contribuciones detalladas
                    with st.expander("üìä An√°lisis Detallado de Contribuciones", expanded=True):
                        col_contrib1, col_contrib2 = st.columns(2)
                        
                        with col_contrib1:
                            st.subheader("üí∞ Contribuci√≥n al Valor por m¬≤")
                            contrib_df_valor = pd.DataFrame({
                                'Variable': list(contrib_valor.keys()),
                                'Contribuci√≥n (‚Ç¨)': list(contrib_valor.values())
                            })
                            st.dataframe(contrib_df_valor, width=True)
                        
                        with col_contrib2:
                            st.subheader("üìà Contribuci√≥n a la Tasa")
                            contrib_df_tasa = pd.DataFrame({
                                'Variable': list(contrib_tasa.keys()),
                                'Contribuci√≥n (%)': [f"{v:.4f}" for v in contrib_tasa.values()]
                            })
                            st.dataframe(contrib_df_tasa, width=True)
                    
                    # Factores m√°s influyentes
                    with st.expander("üéØ Factores M√°s Influyentes", expanded=True):
                        # Para valor
                        contrib_abs_valor = {k: abs(v) for k, v in contrib_valor.items() if k != 'valor_base'}
                        top3_valor = sorted(contrib_abs_valor.items(), key=lambda x: x[1], reverse=True)[:3]
                        
                        # Para tasa
                        contrib_abs_tasa = {k: abs(float(v)) for k, v in contrib_tasa.items() if k != 'tasa_base'}
                        top3_tasa = sorted(contrib_abs_tasa.items(), key=lambda x: x[1], reverse=True)[:3]
                        
                        col_top1, col_top2 = st.columns(2)
                        with col_top1:
                            st.write("**Valor por m¬≤:**")
                            for i, (var, val) in enumerate(top3_valor, 1):
                                st.write(f"{i}. {var}: ‚Ç¨ {contrib_valor[var]:.0f}")
                        
                        with col_top2:
                            st.write("**Tasa de descuento:**")
                            for i, (var, val) in enumerate(top3_tasa, 1):
                                st.write(f"{i}. {var}: {contrib_tasa[var]:.4f}")
                    
                    # Bot√≥n de descarga
                    resultado = {
                        'fecha_calculo': datetime.now().isoformat(),
                        'municipio': municipio,
                        'superficie': superficie,
                        'valor_m2': valor_m2,
                        'valor_total': valor_total,
                        'tasa_descuento': tasa_descuento,
                        'modelo_usado': modelo_valor['nombre'],
                        'contribuciones_valor': contrib_valor,
                        'contribuciones_tasa': contrib_tasa
                    }
                    
                    st.download_button(
                        "üì• Descargar Informe JSON",
                        data=json.dumps(resultado, indent=2),
                        file_name=f"tasacion_{municipio}_{datetime.now().strftime('%Y%m%d_%H%M')}.json",
                        mime="application/json",
                        width=True
                    )
            else:
                st.info("‚ÑπÔ∏è Complete los datos y haga clic en 'Calcular Valor y Tasa' para obtener resultados")

def pagina_tasacion_multiple():
    """Pesta√±a para tasaci√≥n m√∫ltiple con validaci√≥n avanzada"""
    st.header("üìÅ Tasaci√≥n M√∫ltiple por Lotes")
    
    with st.expander("‚ÑπÔ∏è Informaci√≥n sobre tasaci√≥n m√∫ltiple", expanded=True):
        st.markdown("""
        **Caracter√≠sticas de la tasaci√≥n por lotes:**
        - Procesamiento simult√°neo de m√∫ltiples inmuebles usando modelos econom√©tricos
        - Validaci√≥n autom√°tica de datos y formato
        - Detecci√≥n y reporte de errores por fila
        - Generaci√≥n de informe consolidado con an√°lisis de contribuciones
        - L√≠mite: 500 registros por lote
        
        **Columnas requeridas en el Excel:**
        - `municipio`: Nombre del municipio
        - `superficie`: Superficie en m¬≤ (n√∫mero)
        - `antiguedad`: A√±os desde construcci√≥n (n√∫mero)
        - `dormitorios`: N√∫mero de dormitorios (n√∫mero)
        - `banos`: N√∫mero de ba√±os (n√∫mero)
        - `planta`: Planta del inmueble (n√∫mero)
        - `calefaccion`: S√≠/No o 1/0
        - `ascensor`: S√≠/No o 1/0
        - `vivienda_nueva`: S√≠/No o 1/0
        - `calidad_alta`: S√≠/No o 1/0
        """)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        uploaded_file = st.file_uploader(
            "üì§ Subir archivo Excel para tasaci√≥n m√∫ltiple", 
            type=['xlsx', 'xls'],
            help="El archivo debe contener las columnas requeridas en el formato especificado"
        )
        
        if uploaded_file is not None:
            try:
                df = pd.read_excel(uploaded_file)
                
                # Validar columnas requeridas
                columnas_requeridas = ['municipio', 'superficie', 'antiguedad', 'dormitorios', 'banos', 'planta']
                columnas_opcionales = ['calefaccion', 'ascensor', 'vivienda_nueva', 'calidad_alta']
                
                faltan_requeridas = [col for col in columnas_requeridas if col not in df.columns]
                if faltan_requeridas:
                    st.error(f"‚ùå Faltan columnas requeridas: {', '.join(faltan_requeridas)}")
                    return
                
                st.success(f"‚úÖ Archivo cargado correctamente - {len(df)} registros detectados")
                
                # Estad√≠sticas
                col_stats1, col_stats2, col_stats3 = st.columns(3)
                with col_stats1:
                    st.metric("Registros", len(df))
                with col_stats2:
                    st.metric("Municipios", df['municipio'].nunique())
                with col_stats3:
                    st.metric("Tasaciones estimadas", f"{len(df)*3}s")
                
                # Vista previa
                st.subheader("üëÅÔ∏è Vista previa de datos")
                st.dataframe(df.head(10), width=True, height=300)
                
                # Procesar lote
                if st.button("üöÄ Procesar Lote Completo", type="primary", width=True):
                    with st.spinner(f"Procesando {len(df)} registros con modelos econom√©tricos..."):
                        resultados = []
                        errores = []
                        
                        for idx, fila in df.iterrows():
                            try:
                                # Validar datos de la fila
                                if pd.isna(fila['municipio']) or pd.isna(fila['superficie']):
                                    errores.append(f"Fila {idx+2}: Datos requeridos faltantes")
                                    continue
                                
                                # Obtener poblaci√≥n y modelo
                                poblacion = obtener_poblacion_municipio(str(fila['municipio']))
                                modelo_valor = st.session_state.modelo.obtener_modelo_por_poblacion(poblacion)
                                
                                if not modelo_valor:
                                    errores.append(f"Fila {idx+2}: No hay modelo para {fila['municipio']}")
                                    continue
                                
                                # Preparar datos
                                datos = {
                                    'superficie': float(fila['superficie']),
                                    'antiguedad': float(fila.get('antiguedad', 0)),
                                    'dormitorios': int(fila.get('dormitorios', 0)),
                                    'banos': int(fila.get('banos', 0)),
                                    'planta': int(fila.get('planta', 0)),
                                    'calefaccion': bool(fila.get('calefaccion', False)),
                                    'ascensor': bool(fila.get('ascensor', False)),
                                    'vivienda_nueva': bool(fila.get('vivienda_nueva', False)),
                                    'calidad_alta': bool(fila.get('calidad_alta', False)),
                                    'estado_alto': False  # Por defecto
                                }
                                
                                # Calcular valores
                                valor_m2, contrib_valor = st.session_state.modelo.calcular_valor_m2(datos, modelo_valor)
                                valor_total = valor_m2 * datos['superficie']
                                tasa_descuento, contrib_tasa = st.session_state.modelo.calcular_tasa_descuento(datos)
                                
                                # Encontrar factores m√°s influyentes
                                contrib_abs = {k: abs(v) for k, v in contrib_valor.items() if k != 'valor_base'}
                                top_factores = sorted(contrib_abs.items(), key=lambda x: x[1], reverse=True)[:2]
                                factores_influyentes = ", ".join([f[0] for f in top_factores])
                                
                                resultados.append({
                                    'municipio': fila['municipio'],
                                    'superficie': datos['superficie'],
                                    'valor_m2': round(valor_m2, 2),
                                    'valor_total': round(valor_total, 2),
                                    'tasa_descuento': round(tasa_descuento, 4),
                                    'modelo': modelo_valor['nombre'],
                                    'factores_influyentes': factores_influyentes
                                })
                                
                            except Exception as e:
                                errores.append(f"Fila {idx+2}: Error en c√°lculo - {str(e)}")
                        
                        # Mostrar resultados
                        if resultados:
                            st.success(f"‚úÖ Procesamiento completado - {len(resultados)} tasaciones generadas")
                            
                            # Crear DataFrame de resultados
                            df_resultados = pd.DataFrame(resultados)
                            
                            # Mostrar resumen
                            col_res1, col_res2, col_res3 = st.columns(3)
                            with col_res1:
                                st.metric("Valor medio m¬≤", f"‚Ç¨ {df_resultados['valor_m2'].mean():,.0f}")
                            with col_res2:
                                st.metric("Tasa media", f"{df_resultados['tasa_descuento'].mean():.2%}")
                            with col_res3:
                                st.metric("√âxito", f"{len(resultados)}/{len(df)}")
                            
                            # Mostrar resultados detallados
                            st.subheader("üìã Resultados Detallados")
                            st.dataframe(df_resultados, width=True)
                            
                            # Bot√≥n de descarga
                            csv = df_resultados.to_csv(index=False)
                            st.download_button(
                                "üì• Descargar Resultados CSV",
                                data=csv,
                                file_name=f"resultados_tasacion_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
                                mime="text/csv",
                                width=True
                            )
                        
                        if errores:
                            st.warning(f"‚ö†Ô∏è Se encontraron {len(errores)} errores:")
                            for error in errores[:10]:  # Mostrar solo primeros 10 errores
                                st.write(f"‚Ä¢ {error}")
                            if len(errores) > 10:
                                st.write(f"... y {len(errores) - 10} errores m√°s")
                                
            except Exception as e:
                st.error(f"‚ùå Error procesando el archivo: {str(e)}")
    
    with col2:
        st.subheader("üìã Plantilla de Ejemplo")
        
        # Crear plantilla con datos de ejemplo
        sample_data = {
            'municipio': ['Gij√≥n', 'Oviedo', 'Avil√©s', 'Sariego', 'Nava'],
            'superficie': [85.5, 120.0, 65.0, 95.0, 110.0],
            'antiguedad': [15, 8, 25, 5, 12],
            'dormitorios': [3, 4, 2, 3, 4],
            'banos': [2, 3, 1, 2, 2],
            'planta': [2, 3, 1, 0, 2],
            'calefaccion': [True, True, False, True, True],
            'ascensor': [True, True, False, False, True],
            'vivienda_nueva': [False, True, False, True, False],
            'calidad_alta': [False, True, False, False, True]
        }
        sample_df = pd.DataFrame(sample_data)
        
        st.download_button(
            "üì• Descargar plantilla",
            data=sample_df.to_csv(index=False),
            file_name="plantilla_tasacion_multiple.csv",
            mime="text/csv",
            help="Descargue esta plantilla como referencia para el formato requerido",
            width=True
        )
        
        st.markdown("---")
        st.markdown("### üí° Consejos")
        st.write("‚Ä¢ Use nombres de municipios consistentes")
        st.write("‚Ä¢ Verifique que los valores num√©ricos sean positivos")
        st.write("‚Ä¢ Las columnas booleanas pueden usar S√≠/No o 1/0")
        st.write("‚Ä¢ El procesamiento tarda ~3 segundos por registro")

def pagina_documentacion():
    """Pesta√±a de documentaci√≥n t√©cnica mejorada"""
    st.header("üìö Documentaci√≥n T√©cnica - Modelos ECO 805")
    
    # Introducci√≥n
    st.markdown("""
    <div style='background: #f0f2f6; padding: 2rem; border-radius: 10px; border-left: 4px solid #1f77b4;'>
        <h4 style='color: #1f77b4; margin-top: 0;'>Modelos Econom√©tricos para Tasaci√≥n Inmobiliaria</h4>
        <p style='margin-bottom: 0;'>
            Sistema de valoraci√≥n basado en an√°lisis de regresi√≥n m√∫ltiple sobre una base de datos de 
            <strong>205,000+ observaciones</strong> (testigos y viviendas tasadas). Desarrollado seg√∫n 
            la normativa ECO 805 con validaci√≥n estad√≠stica robusta.
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Metodolog√≠a
    st.subheader("üî¨ Metodolog√≠a Cient√≠fica")
    
    col_metodo1, col_metodo2 = st.columns(2)
    
    with col_metodo1:
        st.markdown("""
        **Base de Datos:**
        - **205,000+ testigos** inmobiliarios
        - **34,000+ viviendas** tasadas por AESVAL
        - Per√≠odo de an√°lisis: **2000-2024**
        - Variables intr√≠nsecas y extr√≠nsecas
        
        **Procesamiento:**
        - Limpieza y validaci√≥n de datos
        - An√°lisis de regresi√≥n m√∫ltiple
        - Segmentaci√≥n por tama√±o municipal
        - Validaci√≥n de robustez estad√≠stica
        """)
    
    with col_metodo2:
        st.markdown("""
        **Validaci√≥n Estad√≠stica:**
        - Coeficientes de determinaci√≥n R¬≤: 0.78-0.88
        - Errores est√°ndar robustos
        - Tests de significancia estad√≠stica
        - An√°lisis de residuos
        - Validaci√≥n cruzada
        
        **Software Utilizado:**
        - STATA 18 para an√°lisis econom√©trico
        - Python para implementaci√≥n
        - Streamlit para interfaz web
        """)
    
    # Modelos matem√°ticos
    st.subheader("üßÆ Modelos Matem√°ticos Implementados")
    
    tab_model1, tab_model2, tab_model3 = st.tabs(["Valor por m¬≤", "Tasa Descuento", "Prima Riesgo"])
    
    with tab_model1:
        st.markdown("""
        ### Modelo de Valor por Metro Cuadrado
        
        $$VM_{i} = \\beta_0 + \\sum_{j=1}^{J}\\beta_j X_{ji} + \\epsilon_i$$
        
        **Donde:**
        - $VM_{i}$: Valor por m¬≤ del inmueble i
        - $\\beta_0$: T√©rmino independiente (valor base municipal)
        - $\\beta_j$: Coeficientes de las variables explicativas
        - $X_{ji}$: Variables intr√≠nsecas del inmueble
        - $\\epsilon_i$: T√©rmino de error
        
        **Variables Significativas:**
        - Superficie (efecto variable seg√∫n municipio)
        - Antig√ºedad (depreciaci√≥n)
        - N√∫mero de ba√±os (positivo)
        - N√∫mero de dormitorios (negativo en municipios grandes)
        - Calefacci√≥n, ascensor, calidad constructiva
        """)
        
        # Mostrar coeficientes de ejemplo
        st.markdown("#### Coeficientes Ejemplares (Municipios >200,000 hab)")
        coef_ejemplo = {
            'Intercepto': 1410.69,
            'Vivienda Nueva': 161.31,
            'Superficie (m¬≤)': 7.44,
            'Calefacci√≥n': 140.03,
            'Dormitorios': -379.05,
            'Ba√±os': 290.35,
            'Calidad Alta': 418.63,
            'Ascensor': 584.55,
            'Planta': 30.40
        }
        st.dataframe(pd.DataFrame(list(coef_ejemplo.items()), columns=['Variable', 'Coeficiente (‚Ç¨)']))
    
    with tab_model2:
        st.markdown("""
        ### Modelo de Tasa de Descuento
        
        $$Tasa_i = \\beta_0 + \\sum_{j=1}^{J}\\beta_j X_{ji} + \\epsilon_i$$
        
        **Componentes:**
        - Tasa libre de riesgo (bonos estado 5 a√±os)
        - Prima de riesgo espec√≠fica del inmueble
        
        **Variables Significativas:**
        - Superficie: efecto positivo marginal
        - Antig√ºedad: efecto positivo (mayor riesgo)
        - Ba√±os: efecto negativo (reduce riesgo)
        - Ascensor: efecto negativo (reduce riesgo)
        - Estado conservaci√≥n alto: efecto negativo
        """)
        
        st.latex(r"""
        \text{Tasa Descuento} = \text{Tasa Libre Riesgo} + \text{Prima Riesgo}
        """)
    
    with tab_model3:
        st.markdown("""
        ### Modelo de Prima de Riesgo
        
        $$Prima_i = \\beta_0 + \\sum_{j=1}^{J}\\beta_j X_{ji} + \\epsilon_i$$
        
        **Factores de Riesgo Considerados:**
        - Riesgo de ubicaci√≥n (municipio)
        - Riesgo por antig√ºedad y estado
        - Riesgo por caracter√≠sticas constructivas
        - Riesgo de mercado local
        
        **Hallazgos Clave:**
        - Municipios peque√±os: mayor prima por iliquidez
        - Antig√ºedad: aumenta prima consistentemente
        - Ascensor y buen estado: reducen prima
        - Calidad constructiva: efecto variable
        """)
    
    # Segmentaci√≥n por poblaci√≥n
    st.subheader("üèôÔ∏è Segmentaci√≥n por Tama√±o Municipal")
    
    col_seg1, col_seg2, col_seg3, col_seg4 = st.columns(4)
    
    with col_seg1:
        st.metric("< 10,000 hab", "R¬≤ = 0.78", "Modelo m√°s estable")
    with col_seg2:
        st.metric("10,000-50,000", "R¬≤ = 0.82", "Balanceado")
    with col_seg3:
        st.metric("50,000-200,000", "R¬≤ = 0.85", "Alta precisi√≥n")
    with col_seg4:
        st.metric("> 200,000 hab", "R¬≤ = 0.88", "M√°xima granularidad")
    
    st.markdown("""
    **Efectos Diferenciales por Segmento:**
    - **Superficie**: Negativo en municipios peque√±os, positivo en grandes
    - **Dormitorios**: Efecto negativo se intensifica con tama√±o municipal
    - **Ascensor**: Impacto creciente con tama√±o municipal
    - **Planta**: Mayor valoraci√≥n en municipios grandes
    """)
    
    # Variables analizadas
    st.subheader("üìä Variables Analizadas en el Estudio")
    
    tab_vars1, tab_vars2, tab_vars3 = st.tabs(["Intr√≠nsecas", "Extr√≠nsecas", "Resultados"])
    
    with tab_vars1:
        st.markdown("""
        ### Variables Intr√≠nsecas del Inmueble
        
        **Caracter√≠sticas F√≠sicas:**
        - Superficie construida (m¬≤)
        - A√±o de construcci√≥n ‚Üí Antig√ºedad
        - N√∫mero de dormitorios
        - N√∫mero de ba√±os
        - Planta de ubicaci√≥n
        
        **Calidades y Dotaciones:**
        - Calidad constructiva (B√°sica/Media/Alta/Lujo)
        - Estado de conservaci√≥n (1-6)
        - Calefacci√≥n (S√≠/No)
        - Ascensor (S√≠/No)
        - Aire acondicionado
        - Trastero, plaza garaje
        """)
    
    with tab_vars2:
        st.markdown("""
        ### Variables Extr√≠nsecas y de Entorno
        
        **Ubicaci√≥n:**
        - Municipio y c√≥digo postal
        - Comunidad Aut√≥noma
        - Tama√±o de poblaci√≥n
        - Tipolog√≠a de n√∫cleo (urbano/rural)
        
        **Entorno Econ√≥mico:**
        - Euribor hist√≥rico
        - Crecimiento del PIB
        - Tasa de paro municipal
        - IPC y evoluci√≥n de precios
        
        **Servicios y Equipamientos:**
        - Accesibilidad y comunicaciones
        - Equipamiento educativo
        - Zonas verdes y recreativas
        - Comercio y servicios
        """)
    
    with tab_vars3:
        st.markdown("""
        ### Resultados y Validaciones
        
        **Robustez Estad√≠stica:**
        - Todos los coeficientes significativos (p < 0.05)
        - R¬≤ consistentes por segmentos
        - Residuos normalmente distribuidos
        - No multicolinealidad cr√≠tica
        
        **Validaci√≥n Cruzada:**
        - Comparaci√≥n testigos vs viviendas tasadas
        - An√°lisis por per√≠odos temporales
        - Validaci√≥n con datos externos (INE)
        
        **Aplicabilidad:**
        - Cobertura nacional completa
        - Actualizaci√≥n peri√≥dica autom√°tica
        - Escalable a nuevas tipolog√≠as
        """)

def mostrar_footer():
    """Footer profesional"""
    st.markdown("---")
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown(
            f"""
            <div style='text-align: center; color: #666; padding: 2rem 0;'>
                <p style='margin-bottom: 0.5rem; font-size: 0.9rem;'>
                    ¬© {current_year} <strong>AESVAL</strong> - Centro Tecnol√≥gico CTIC | 
                    Sistema de Tasaci√≥n Inteligente ECO 805 v2.0
                </p>
                <p style='margin-bottom: 0; font-size: 0.8rem;'>
                    Desarrollado con Streamlit ‚Ä¢ Modelos Econom√©tricos STATA ‚Ä¢ 
                    <a href='#' style='color: #666;'>Pol√≠tica de privacidad</a> ‚Ä¢ 
                    <a href='#' style='color: #666;'>T√©rminos de uso</a>
                </p>
            </div>
            """, 
            unsafe_allow_html=True
        )

def main():
    """Funci√≥n principal"""
    inicializar_session_state()
    
    mostrar_header()
    mostrar_sidebar()
    
    tab1, tab2, tab3 = st.tabs([
        "üè† Tasaci√≥n Individual", 
        "üìÅ Tasaci√≥n por Lotes", 
        "üìö Documentaci√≥n T√©cnica"
    ])
    
    with tab1:
        pagina_tasacion_individual()
    
    with tab2:
        pagina_tasacion_multiple()
    
    with tab3:
        pagina_documentacion()
    
    mostrar_footer()

if __name__ == "__main__":
    main()