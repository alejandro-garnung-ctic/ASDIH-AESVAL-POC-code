import streamlit as st
import pandas as pd
import numpy as np
from typing import Dict, List, Optional, Tuple
import io
import base64
from datetime import datetime
import json
import yaml
import os

current_year = datetime.now().year

# Configuraci√≥n de p√°gina
st.set_page_config(
    page_title="AESVAL - Sistema de Tasaci√≥n Autom√°tico",
    page_icon="üè†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Ocultar men√∫ de Streamlit
# hide_streamlit_style = """
#     <style>
    
#     /* Ocultar todo el header */
#     header {
#         opacity: 0;
#     }
    
#     /* Mostrar solo el bot√≥n de expandir/contraer sidebar */
#     button[data-testid="stExpandSidebarButton"] {
#         display: block !important;
#         position: fixed !important;
#         top: 10px !important;
#         left: 10px !important;
#         z-index: 999999 !important;
#         background: white !important;
#         border: 1px solid #ccc !important;
#         border-radius: 4px !important;
#         padding: 8px !important;
#         opacity: 1;
#     }
    
#     </style>
# """
# st.markdown(hide_streamlit_style, unsafe_allow_html=True)

def cargar_configuracion_sistema():
    """Carga la configuraci√≥n del sistema desde archivo YAML"""
    try:
        with open('config/info.yaml', 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    except FileNotFoundError:
        st.error("‚ùå No se encontr√≥ el archivo de configuraci√≥n del sistema: config/info.yaml")
        # Configuraci√≥n por defecto
        return {
            'sistema': {
                'nombre': 'Sistema de Tasaci√≥n Autom√°tico',
                'version': '1.0',
                'actualizacion': '2025-20-10',
                'modelo': 'An√°lisis Econom√©trico Regresivo',
                'base_datos': '205,000+ testigos',
                'desarrollador': 'AESVAL - CTIC',
                'a√±o': 2025
            },
            'metricas': {
                'r2_promedio': '69.83%',
                'precision': '97.2%',
                'tiempo_procesamiento': '0.1 ms por registro',
                'limite_registros': 50000
            },
            'modelos_disponibles': [
                #{'clave': 'testigos_menos_10000', 'nombre': 'Municipios < 10,000 hab'},
                #{'clave': 'testigos_10000_50000', 'nombre': 'Municipios 10,000-50,000 hab'},
                #{'clave': 'testigos_50000_200000', 'nombre': 'Municipios 50,000-200,000 hab'},
                #{'clave': 'testigos_mas_200000', 'nombre': 'Municipios > 200,000 hab'},
                {'clave': 'testigos_tasa', 'nombre': 'Modelo Tasa Descuento'},
                {'clave': 'testigos_prima', 'nombre': 'Modelo Prima Riesgo'}
            ]
        }
    except Exception as e:
        st.error(f"‚ùå Error cargando configuraci√≥n del sistema: {e}")
        return None

def cargar_modelos_json():
    """Carga los modelos desde archivos JSON en config/"""
    modelos = {}
    
    mapeo_modelos = {
        #'modelo_Testigos_menos_de_10000': 'testigos_menos_10000',
        #'modelo_Testigos_10000-50000': 'testigos_10000_50000', 
        #'modelo_Testigos_50000-200000': 'testigos_50000_200000',
        #'modelo_Testigos_m√°s_de_200000': 'testigos_mas_200000',
        'modelo_Testigos_Prima': 'testigos_prima',
        'modelo_Testigos_Tasa': 'testigos_tasa'
    }
    
    for archivo, clave in mapeo_modelos.items():
        try:
            ruta = f"config/{archivo}.json"
            if os.path.exists(ruta):
                with open(ruta, 'r', encoding='utf-8') as f:
                    modelos[clave] = json.load(f)
                    print(f"‚úÖ Modelo {clave} cargado correctamente")
            else:
                # Buscar archivos similares
                archivos_disponibles = [f for f in os.listdir('config') if f.endswith('.json')]
                archivo_encontrado = None
                
                # Buscar coincidencias aproximadas
                for archivo_disp in archivos_disponibles:
                    archivo_sin_ext = archivo_disp.replace('.json', '')
                    if archivo_sin_ext.lower().replace('_', '-').replace('√°', 'a') == archivo.lower().replace('_', '-').replace('√°', 'a'):
                        archivo_encontrado = archivo_disp
                        break
                
                if archivo_encontrado:
                    ruta_alternativa = f"config/{archivo_encontrado}"
                    with open(ruta_alternativa, 'r', encoding='utf-8') as f:
                        modelos[clave] = json.load(f)
                    st.success(f"‚úÖ Modelo {clave} cargado desde {archivo_encontrado}")
                else:
                    st.warning(f"‚ö†Ô∏è No se encontr√≥ {ruta} (archivos disponibles: {', '.join(archivos_disponibles)})")
                    
        except Exception as e:
            st.error(f"‚ùå Error cargando {archivo}: {e}")
    
    return modelos

def get_image_base64(path):
    """Carga im√°genes y las convierte a base64"""
    import os
    possible_paths = [
        f"/app/{path}",           
        f"/app/assets/{path.split('/')[-1]}", 
        f"./{path}",
        f"assets/{path}",
    ]
    
    for img_path in possible_paths:
        try:
            if os.path.exists(img_path):
                with open(img_path, "rb") as image_file:
                    return base64.b64encode(image_file.read()).decode()
        except:
            continue
    return None

def es_modelo_tasa_o_prima(nombre_modelo: str) -> bool:
    """Determina si el modelo es de Tasa o Prima"""
    return 'tasa' in nombre_modelo.lower() or 'prima' in nombre_modelo.lower()

def es_modelo_valor(nombre_modelo: str) -> bool:
    """Determina si el modelo es de valor normal"""
    return not es_modelo_tasa_o_prima(nombre_modelo)

class ModeloTasacion:
    """Clase para gestionar los modelos de tasaci√≥n"""
    
    def __init__(self, modelos_json: Dict):
        self.modelos = modelos_json
    
    def obtener_modelos_disponibles(self) -> List[Tuple[str, str]]:
        """Retorna la lista de modelos disponibles con nombres legibles desde YAML"""
        # Intentar obtener desde la configuraci√≥n YAML
        if hasattr(st.session_state, 'config_sistema') and st.session_state.config_sistema:
            modelos_config = st.session_state.config_sistema.get('modelos_disponibles', [])
            disponibles = []
            for modelo_config in modelos_config:
                clave = modelo_config.get('clave')
                nombre = modelo_config.get('nombre')
                if clave in self.modelos: # Solo incluir modelos que est√©n cargados
                    disponibles.append((clave, nombre))
            
            if disponibles:
                return disponibles
        
        # Fallback a nombres por defecto - SOLO TASA Y PRIMA
        nombres_legibles = {
            #'testigos_menos_10000': 'Municipios < 10,000 hab',
            #'testigos_10000_50000': 'Municipios 10,000-50,000 hab',
            #'testigos_50000_200000': 'Municipios 50,000-200,000 hab',
            #'testigos_mas_200000': 'Municipios > 200,000 hab',
            'testigos_tasa': 'Modelo Tasa Descuento',
            'testigos_prima': 'Modelo Prima Riesgo'
        }
        
        disponibles = []
        for clave in self.modelos.keys():
            nombre = nombres_legibles.get(clave, clave)
            disponibles.append((clave, nombre))
        
        return disponibles

    def obtener_modelo(self, nombre_modelo: str) -> Optional[Dict]:
        """Obtiene el modelo por su nombre"""
        return self.modelos.get(nombre_modelo)
    
    # def calcular_valor_m2(self, datos: Dict, modelo: Dict, codigo_municipio: str) -> Tuple[float, Dict]:
    #     #Calcula el valor por m¬≤ usando el modelo especificado
    #     coef_municipio = modelo['coeficientes_municipios'].get(str(codigo_municipio), 0)
    #     coef_variables = modelo['coeficientes_variables']
    #     _cons = modelo['_cons']
        
    #     contribuciones = {}
    #     contribuciones_porcentaje = {}
        
    #     # Valor base (constante + efecto municipio)
    #     valor_base = _cons + coef_municipio
    #     contribuciones['valor_base'] = valor_base
    #     contribuciones[f'municipio_{codigo_municipio}'] = coef_municipio
        
    #     # Aplicar coeficientes seg√∫n variables disponibles
    #     if datos.get('vivienda_nueva') and 'Dnueva' in coef_variables and coef_variables['Dnueva'] is not None:
    #         contrib = coef_variables['Dnueva']
    #         valor_base += contrib
    #         contribuciones['vivienda_nueva'] = contrib
        
    #     if 'SU' in coef_variables and coef_variables['SU'] is not None and datos.get('superficie'):
    #         contrib = coef_variables['SU'] * datos['superficie']
    #         valor_base += contrib
    #         contribuciones['superficie'] = contrib
        
    #     if datos.get('calefaccion') and 'DCA' in coef_variables and coef_variables['DCA'] is not None:
    #         contrib = coef_variables['DCA']
    #         valor_base += contrib
    #         contribuciones['calefaccion'] = contrib
        
    #     if 'ND' in coef_variables and coef_variables['ND'] is not None and datos.get('dormitorios'):
    #         contrib = coef_variables['ND'] * datos['dormitorios']
    #         valor_base += contrib
    #         contribuciones['dormitorios'] = contrib
        
    #     if 'NB' in coef_variables and coef_variables['NB'] is not None and datos.get('banos'):
    #         contrib = coef_variables['NB'] * datos['banos']
    #         valor_base += contrib
    #         contribuciones['banos'] = contrib
        
    #     if datos.get('calidad_alta') and 'CC_Alta' in coef_variables and coef_variables['CC_Alta'] is not None:
    #         contrib = coef_variables['CC_Alta']
    #         valor_base += contrib
    #         contribuciones['calidad_alta'] = contrib
        
    #     if datos.get('ascensor') and 'DAS' in coef_variables and coef_variables['DAS'] is not None:
    #         contrib = coef_variables['DAS']
    #         valor_base += contrib
    #         contribuciones['ascensor'] = contrib
        
    #     if 'PLbis' in coef_variables and coef_variables['PLbis'] is not None and datos.get('planta'):
    #         contrib = coef_variables['PLbis'] * datos['planta']
    #         valor_base += contrib
    #         contribuciones['planta'] = contrib
        
    #     valor_final = max(0, valor_base)
        
    #     # CALCULAR PORCENTAJES RELATIVOS
    #     if valor_final > 0:
    #         for key, value in contribuciones.items():
    #             contribuciones_porcentaje[key] = (value / valor_final) * 100 # En porcentaje
        
    #     return valor_final, contribuciones_porcentaje # ‚Üê Devuelve porcentajes
    
    def calcular_tasa_descuento(self, datos: Dict, codigo_municipio: str) -> Tuple[float, Dict]:
        """Calcula la tasa de descuento"""
        
        modelo_tasa = self.modelos.get('testigos_tasa')
        if not modelo_tasa:
            return 0.0, {}, "‚ùå No se encontr√≥ el modelo de tasa en los archivos JSON"
        
        # VERIFICAR SI EL MUNICIPIO EXISTE
        codigo_str = str(codigo_municipio)
        municipios_disponibles = list(modelo_tasa['coeficientes_municipios'].keys())
        
        if codigo_str not in municipios_disponibles:
            return 0.0, {}, f"‚ùå Municipio '{codigo_municipio}' no existe en este modelo."
        
        # Resto del c√≥digo igual (sin st.error)
        coef_municipio = modelo_tasa['coeficientes_municipios'].get(codigo_str, 0)
        coef_variables = modelo_tasa['coeficientes_variables']
        _cons = modelo_tasa['_cons']
        
        contribuciones = {}
        contribuciones_porcentaje = {}
        
        # Tasa base (constante + efecto municipio)
        tasa_base = _cons + coef_municipio
        contribuciones['tasa_base'] = tasa_base
        contribuciones[f'municipio_{codigo_municipio}'] = coef_municipio
        
        # Aplicar coeficientes seg√∫n variables disponibles usando los coeficientes reales
        if 'SU' in coef_variables and coef_variables['SU'] is not None and datos.get('superficie'):
            contrib = coef_variables['SU'] * datos['superficie']
            tasa_base += contrib
            contribuciones['superficie'] = contrib
        
        if 'antig' in coef_variables and coef_variables['antig'] is not None and datos.get('antiguedad'):
            contrib = coef_variables['antig'] * datos['antiguedad']
            tasa_base += contrib
            contribuciones['antiguedad'] = contrib
        
        if datos.get('vivienda_nueva') and 'Dnueva' in coef_variables and coef_variables['Dnueva'] is not None:
            contrib = coef_variables['Dnueva']
            tasa_base += contrib
            contribuciones['vivienda_nueva'] = contrib
        
        if 'NB' in coef_variables and coef_variables['NB'] is not None and datos.get('banos'):
            contrib = coef_variables['NB'] * datos['banos']
            tasa_base += contrib
            contribuciones['banos'] = contrib
        
        if 'ND' in coef_variables and coef_variables['ND'] is not None and datos.get('dormitorios'):
            contrib = coef_variables['ND'] * datos['dormitorios']
            tasa_base += contrib
            contribuciones['dormitorios'] = contrib
        
        if datos.get('ascensor') and 'DAS' in coef_variables and coef_variables['DAS'] is not None:
            contrib = coef_variables['DAS']
            tasa_base += contrib
            contribuciones['ascensor'] = contrib
        
        if datos.get('estado_alto') and 'EC_Alto' in coef_variables and coef_variables['EC_Alto'] is not None:
            contrib = coef_variables['EC_Alto']
            tasa_base += contrib
            contribuciones['estado_alto'] = contrib
        
        if datos.get('rehabilitacion') and 'rehab' in coef_variables and coef_variables['rehab'] is not None:
            contrib = coef_variables['rehab']
            tasa_base += contrib
            contribuciones['rehabilitacion'] = contrib
        
        # Asegurar que la tasa est√© en un rango razonable
        tasa_final = max(0.01, min(1.0, tasa_base))
        
        # CALCULAR PORCENTAJES RELATIVOS
        contribuciones_porcentaje = {}
        for key, value in contribuciones.items():
            contribuciones_porcentaje[key] = (value / tasa_final) * 100  
        
        return tasa_final, contribuciones_porcentaje, ""  # ‚Üê Devuelve string vac√≠o para √©xito

    def calcular_prima_riesgo(self, datos: Dict, codigo_municipio: str) -> Tuple[float, Dict]:
        """Calcula la prima de riesgo"""
        
        modelo_prima = self.modelos.get('testigos_prima')
        if not modelo_prima:
            return 0.0, {}, "‚ùå No se encontr√≥ el modelo de prima en los archivos JSON"
        
        # VERIFICAR SI EL MUNICIPIO EXISTE
        codigo_str = str(codigo_municipio)
        municipios_disponibles = list(modelo_prima['coeficientes_municipios'].keys())
        
        if codigo_str not in municipios_disponibles:
            return 0.0, {}, f"‚ùå Municipio '{codigo_municipio}' no existe en este modelo."
        
        # Resto del c√≥digo igual (sin st.error)
        coef_municipio = modelo_prima['coeficientes_municipios'].get(codigo_str, 0)
        coef_variables = modelo_prima['coeficientes_variables']
        _cons = modelo_prima['_cons']
        
        contribuciones = {}
        contribuciones_porcentaje = {}
        
        # Prima base (constante + efecto municipio)
        prima_base = _cons + coef_municipio
        contribuciones['prima_base'] = prima_base
        contribuciones[f'municipio_{codigo_municipio}'] = coef_municipio
        
        # Aplicar coeficientes seg√∫n variables disponibles usando los coeficientes reales
        if 'SU' in coef_variables and coef_variables['SU'] is not None and datos.get('superficie'):
            contrib = coef_variables['SU'] * datos['superficie']
            prima_base += contrib
            contribuciones['superficie'] = contrib
        
        if 'antig' in coef_variables and coef_variables['antig'] is not None and datos.get('antiguedad'):
            contrib = coef_variables['antig'] * datos['antiguedad']
            prima_base += contrib
            contribuciones['antiguedad'] = contrib
        
        if datos.get('vivienda_nueva') and 'Dnueva' in coef_variables and coef_variables['Dnueva'] is not None:
            contrib = coef_variables['Dnueva']
            prima_base += contrib
            contribuciones['vivienda_nueva'] = contrib
        
        if 'NB' in coef_variables and coef_variables['NB'] is not None and datos.get('banos'):
            contrib = coef_variables['NB'] * datos['banos']
            prima_base += contrib
            contribuciones['banos'] = contrib
        
        if 'ND' in coef_variables and coef_variables['ND'] is not None and datos.get('dormitorios'):
            contrib = coef_variables['ND'] * datos['dormitorios']
            prima_base += contrib
            contribuciones['dormitorios'] = contrib
        
        if datos.get('ascensor') and 'DAS' in coef_variables and coef_variables['DAS'] is not None:
            contrib = coef_variables['DAS']
            prima_base += contrib
            contribuciones['ascensor'] = contrib
        
        if datos.get('estado_alto') and 'EC_Alto' in coef_variables and coef_variables['EC_Alto'] is not None:
            contrib = coef_variables['EC_Alto']
            prima_base += contrib
            contribuciones['estado_alto'] = contrib
        
        if datos.get('rehabilitacion') and 'rehab' in coef_variables and coef_variables['rehab'] is not None:
            contrib = coef_variables['rehab']
            prima_base += contrib
            contribuciones['rehabilitacion'] = contrib
        
        # Asegurar que la prima est√© en un rango razonable
        prima_final = max(0.01, min(1.0, prima_base))
        
        # CALCULAR PORCENTAJES RELATIVOS
        contribuciones_porcentaje = {}
        for key, value in contribuciones.items():
            contribuciones_porcentaje[key] = (value / prima_final) * 100 
        
        return prima_final, contribuciones_porcentaje, ""  # ‚Üê Devuelve string vac√≠o para √©xito

def inicializar_session_state():
    """Inicializa variables de session state"""
    if 'modelos_json' not in st.session_state:
        st.session_state.modelos_json = cargar_modelos_json()
    if 'modelo' not in st.session_state:
        st.session_state.modelo = ModeloTasacion(st.session_state.modelos_json)
    if 'resultados_individuales' not in st.session_state:
        st.session_state.resultados_individuales = []
    if 'config_sistema' not in st.session_state:
        st.session_state.config_sistema = cargar_configuracion_sistema()
    
    # Inicializar variables para persistencia de datos entre modelos
    if 'datos_persistentes' not in st.session_state:
        st.session_state.datos_persistentes = {
            'superficie': 80.0,
            'dormitorios': 3,
            'banos': 2,
            'planta': 2,
            'ascensor': True,
            'calidad_alta': False,
            'vivienda_nueva': False,
            'calefaccion': True,
            'antiguedad': 15,
            'rehabilitacion': False,
            'estado_conservacion': "Buena",
            'codigo_municipio': '2005', 
            'modelo_seleccionado': 'testigos_tasa' 
        }

def mostrar_header():
    """Header profesional con logos"""
    logo_aesval = get_image_base64("assets/aesval.png")
    logo_ctic = get_image_base64("assets/CTIC.png")
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col1:
        if logo_aesval:
            st.markdown(f'<div style="text-align: center;"><img src="data:image/png;base64,{logo_aesval}" width="150"></div>', unsafe_allow_html=True)
        else:
            st.markdown('<div style="text-align: center; background: linear-gradient(135deg, #1f77b4, #2e8bc0); padding: 30px; border-radius: 10px; color: white;"><h3>üè¢ AESVAL</h3><p style="font-size: 0.8rem;">Entidad Tasadora</p></div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div style='text-align: center; padding: 1rem 0;'>
            <h2 style='color: #1f77b4; margin-bottom: 0.5rem; font-size: 2.5rem;'>
                üè† SISTEMA DE TASACI√ìN
            </h2>
            <h4 style='color: #666; margin-top: 0; font-weight: 300;'>
                Modelos de Tasa Descuento y Prima de Riesgo ECO 805
            </h4>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        if logo_ctic:
            st.markdown(f'<div style="text-align: center;"><img src="data:image/png;base64,{logo_ctic}" width="120"></div>', unsafe_allow_html=True)
        else:
            st.markdown('<div style="text-align: center; background: linear-gradient(135deg, #ff6b6b, #ff8e8e); padding: 30px; border-radius: 10px; color: white;"><h3>üî¨ CTIC</h3><p style="font-size: 0.8rem;">Centro Tecnol√≥gico</p></div>', unsafe_allow_html=True)
    
    st.markdown("---")

def mostrar_sidebar():
    """Sidebar con informaci√≥n del sistema cargada desde YAML"""
    if not st.session_state.config_sistema:
        st.error("No se pudo cargar la configuraci√≥n del sistema")
        return
        
    config = st.session_state.config_sistema
    sistema = config.get('sistema', {})
    metricas = config.get('metricas', {})
    modelos_config = config.get('modelos_disponibles', [])
    
    with st.sidebar:
        st.markdown(f"""
        <div style='background: linear-gradient(135deg, #1f77b4, #2e8bc0); padding: 2rem; border-radius: 10px; color: white; margin-bottom: 2rem;'>
            <h3 style='color: white; margin-bottom: 1rem;'>üìä {sistema.get('nombre', 'Sistema AESVAL ECO 805')}</h3>
            <p style='margin-bottom: 0; font-size: 0.9rem;'>
                Plataforma oficial para c√°lculo de Tasa Descuento y Prima de Riesgo seg√∫n normativa ECO 805
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("### ‚ÑπÔ∏è Informaci√≥n del Sistema")
        st.info(f"""
        **Versi√≥n:** {sistema.get('version', '1.0')}\n
        **Actualizaci√≥n:** {sistema.get('actualizacion', '2025-01-10')}\n
        **Modelo:** {sistema.get('modelo', 'ECO 805 - An√°lisis Econom√©trico')}\n
        **Base de datos:** {sistema.get('base_datos', '205,000+ testigos')}\n
        **R¬≤ Promedio:** {metricas.get('r2_promedio', '69.83%')}\n
        """)
        
        st.markdown("---")
        st.markdown("### üìà Modelos Disponibles")
        
        # Mostrar solo modelos de tasa y prima

        # COMENTAR modelos de testigos
        # for modelo in modelos_config:
        #     nombre = modelo.get('nombre', modelo.get('clave', ''))
        #     st.write(f"‚Ä¢ {nombre}")

        st.write("‚Ä¢ Modelo Tasa Descuento")
        st.write("‚Ä¢ Modelo Prima Riesgo")
        
        st.markdown("---")
        st.markdown(f"""
        <div style='text-align: center; color: #666; font-size: 0.8rem; padding: 1rem 0;'>
            <p>¬© {sistema.get('a√±o', current_year)} {sistema.get('desarrollador', 'AESVAL - CTIC')}</p>
            <p>Sistema de Tasaci√≥n Autom√°tico</p>
        </div>
        """, unsafe_allow_html=True)

def pagina_tasacion_individual():
    """Pesta√±a para tasaci√≥n individual - SOLO TASA Y PRIMA"""
    st.header("üìä C√°lculo Individual - Tasa y Prima ECO 805")
    
    with st.container():
        st.info("""
        üí° **Complete los datos del inmueble para calcular la Tasa de Descuento o Prima de Riesgo 
        basada en modelos econom√©tricos desarrollados con an√°lisis de regresi√≥n m√∫ltiple.**
        """)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        with st.container():
            st.subheader("üèõÔ∏è Datos del Inmueble")
            
            col1_1, col1_2 = st.columns(2)
            
            with col1_1:
                # Selecci√≥n directa del modelo - SOLO TASA Y PRIMA
                modelos_disponibles = st.session_state.modelo.obtener_modelos_disponibles()
                if not modelos_disponibles:
                    st.error("‚ùå No se cargaron modelos. Verifique los archivos JSON en config/")
                    st.stop()
                
                # Obtener modelo actual de datos persistentes
                modelo_actual = st.session_state.datos_persistentes.get('modelo_seleccionado', 'testigos_tasa')
                
                modelo_seleccionado = st.selectbox(
                    "Seleccione el modelo",
                    options=[clave for clave, _ in modelos_disponibles],
                    format_func=lambda x: next((nombre for clave, nombre in modelos_disponibles if clave == x), x),
                    help="Elija entre Tasa de Descuento o Prima de Riesgo",
                    key="selectbox_modelo",
                    index=[clave for clave, _ in modelos_disponibles].index(modelo_actual) if modelo_actual in [clave for clave, _ in modelos_disponibles] else 0
                )
                
                # ACTUALIZAR DATOS PERSISTENTES INMEDIATAMENTE cuando cambia el modelo
                if modelo_seleccionado != st.session_state.datos_persistentes.get('modelo_seleccionado'):
                    st.session_state.datos_persistentes['modelo_seleccionado'] = modelo_seleccionado
                
                # Determinar tipo de modelo
                es_modelo_prima = modelo_seleccionado == 'testigos_prima'
                es_modelo_tasa = modelo_seleccionado == 'testigos_tasa'
                
                # C√≥digo del municipio (siempre visible)
                modelo_obj = st.session_state.modelo.obtener_modelo(modelo_seleccionado)
                codigos_disponibles = list(modelo_obj['coeficientes_municipios'].keys()) if modelo_obj and 'coeficientes_municipios' in modelo_obj else []
                
                if not codigos_disponibles:
                    st.error("‚ùå El modelo seleccionado no tiene c√≥digos de municipio disponibles")
                    st.stop()
                
                # Obtener municipio actual de datos persistentes
                municipio_actual = st.session_state.datos_persistentes.get('codigo_municipio', '2005')
                
                # Si el municipio actual no est√° disponible en el nuevo modelo, resetear al primero disponible
                if municipio_actual not in codigos_disponibles:
                    municipio_actual = codigos_disponibles[0]
                    st.session_state.datos_persistentes['codigo_municipio'] = municipio_actual
                
                codigo_municipio = st.selectbox(
                    "C√≥digo de Municipio",
                    options=codigos_disponibles,
                    index=codigos_disponibles.index(municipio_actual),
                    help="Seleccione el c√≥digo del municipio",
                    key="selectbox_municipio"
                )
                
                # ACTUALIZAR DATOS PERSISTENTES cuando cambia el municipio
                if codigo_municipio != st.session_state.datos_persistentes.get('codigo_municipio'):
                    st.session_state.datos_persistentes['codigo_municipio'] = codigo_municipio
                
                # CAMPOS COMUNES A TODOS LOS MODELOS (siempre visibles)
                # Usar valores de datos persistentes como valores por defecto
                datos_persistentes = st.session_state.datos_persistentes
                
                superficie = st.number_input(
                    "Superficie construida (m¬≤)", 
                    min_value=20.0, 
                    max_value=1000.0,
                    value=datos_persistentes.get('superficie', 80.0),
                    step=0.5,
                    help="Superficie total construida en metros cuadrados",
                    key="input_superficie"
                )
                
                dormitorios = st.number_input(
                    "N√∫mero de dormitorios",
                    min_value=1,
                    max_value=10,
                    value=datos_persistentes.get('dormitorios', 3),
                    help="N√∫mero total de dormitorios (variable ND)",
                    key="input_dormitorios"
                )
                
                banos = st.number_input(
                    "N√∫mero de ba√±os",
                    min_value=1,
                    max_value=6,
                    value=datos_persistentes.get('banos', 2),
                    help="N√∫mero total de ba√±os (variable NB)",
                    key="input_banos"
                )
                
                # CAMPOS PARA MODELOS DE TASA/PRIMA
                antiguedad = st.number_input(
                    "Antig√ºedad (a√±os)", 
                    min_value=0, 
                    max_value=200,
                    value=datos_persistentes.get('antiguedad', 15),
                    help="A√±os desde la construcci√≥n del inmueble (variable antig)",
                    key="input_antiguedad"
                )
                
                rehabilitacion = st.checkbox(
                    "Rehabilitaci√≥n del edificio", 
                    value=datos_persistentes.get('rehabilitacion', False),
                    help="¬øEl edificio ha sido rehabilitado? (variable rehab)",
                    key="input_rehabilitacion"
                )
                
                estado_conservacion = st.select_slider(
                    "Estado de conservaci√≥n",
                    options=["Muy deficiente", "Deficiente", "Regular", "Buena", "Muy buena", "√ìptima"],
                    value=datos_persistentes.get('estado_conservacion', "Buena"),
                    help="Estado general de conservaci√≥n del inmueble (variable EC_Alto)",
                    key="input_estado_conservacion_tasa"
                )
            
            with col1_2:
                # CAMPOS COMUNES (continuaci√≥n)
                planta = st.number_input(
                    "Planta",
                    min_value=0,
                    max_value=20,
                    value=datos_persistentes.get('planta', 2),
                    help="Planta en la que se ubica el inmueble (variable PLbis)",
                    key="input_planta"
                )
                
                ascensor = st.checkbox(
                    "Ascensor", 
                    value=datos_persistentes.get('ascensor', True),
                    help="¬øEl edificio tiene ascensor? (variable DAS)",
                    key="input_ascensor"
                )
                        
                calidad_alta = st.checkbox(
                    "Calidad constructiva alta", 
                    value=datos_persistentes.get('calidad_alta', False),
                    help="Calidad de materiales y acabados alta (variable CC_Alta)",
                    key="input_calidad_alta"
                )

                vivienda_nueva = st.checkbox(
                    "Vivienda nueva (<5 a√±os)", 
                    value=datos_persistentes.get('vivienda_nueva', False),
                    help="Menos de 5 a√±os de antig√ºedad (variable Dnueva)",
                    key="input_vivienda_nueva"
                )

    with col2:
        with st.container():
            st.subheader("üéØ Calcular")
            
            # Mostrar informaci√≥n del modelo seleccionado
            if es_modelo_prima:
                st.info("üõ°Ô∏è **Modelo de Prima de Riesgo activado**")
                st.write("Calcula √∫nicamente la prima de riesgo")
            else:
                st.info("üìà **Modelo de Tasa Descuento activado**")
                st.write("Calcula √∫nicamente la tasa de descuento")
            
            # Texto del bot√≥n seg√∫n el tipo de modelo
            texto_boton = ""
            if es_modelo_prima:
                texto_boton = "üõ°Ô∏è Calcular Prima de Riesgo"
            else:
                texto_boton = "üìà Calcular Tasa Descuento"
            
            if st.button(texto_boton, type="primary", width='stretch'):
                with st.spinner("Calculando usando modelos econom√©tricos..."):
                    # Obtener el modelo seleccionado directamente
                    modelo_valor = st.session_state.modelo.obtener_modelo(modelo_seleccionado)
                    
                    if not modelo_valor:
                        st.error("‚ùå No se pudo cargar el modelo seleccionado")
                        return
                    
                    # Preparar datos para tasa/prima
                    datos_inmueble = {
                        'superficie': superficie,
                        'antiguedad': antiguedad,
                        'dormitorios': dormitorios,
                        'banos': banos,
                        'planta': planta,
                        'ascensor': ascensor,
                        'rehabilitacion': rehabilitacion,
                        'calidad_alta': calidad_alta,
                        'estado_alto': estado_conservacion in ["Buena", "Muy buena", "√ìptima"],
                        'vivienda_nueva': vivienda_nueva
                    }
                    
                    # CALCULAR S√ìLO LO QUE CORRESPONDA AL MODELO SELECCIONADO
                    resultados = {}
                    error_calculo = None
                    
                    if es_modelo_tasa:
                        tasa_descuento, contrib_tasa, mensaje_error = st.session_state.modelo.calcular_tasa_descuento(
                            datos_inmueble, codigo_municipio
                        )
                        if mensaje_error:
                            error_calculo = mensaje_error
                        else:
                            resultados.update({
                                'tasa_descuento': tasa_descuento,
                                'contrib_tasa': contrib_tasa
                            })

                    elif es_modelo_prima:
                        prima_riesgo, contrib_prima, mensaje_error = st.session_state.modelo.calcular_prima_riesgo(
                            datos_inmueble, codigo_municipio
                        )
                        if mensaje_error:
                            error_calculo = mensaje_error
                        else:
                            resultados.update({
                                'prima_riesgo': prima_riesgo,
                                'contrib_prima': contrib_prima
                            })
                    
                    # VERIFICAR SI HUBO ERROR
                    if error_calculo:
                        st.error(f"‚ùå Error en el c√°lculo: {error_calculo}")
                        return
                    
                    # Si no hay error, mostrar resultados normalmente
                    st.success("‚úÖ C√°lculo realizado correctamente")
                    
                    # M√©tricas principales (solo lo que se calcul√≥)
                    if es_modelo_prima:
                        col_res1, col_res2 = st.columns(2)
                        with col_res1:
                            st.metric("Prima de Riesgo", f"{resultados['prima_riesgo']:.2%}")
                        with col_res2:
                            st.metric("Tipo de Modelo", "Prima")
                    
                    else:
                        col_res1, col_res2 = st.columns(2)
                        with col_res1:
                            st.metric("Tasa Descuento", f"{resultados['tasa_descuento']:.2%}")
                        with col_res2:
                            st.metric("Tipo de Modelo", "Tasa")
                    
                    # Informaci√≥n del modelo usado
                    st.info(f"**Modelo aplicado:** {modelo_valor['nombre_modelo']}")
                    
                    # Contribuciones detalladas (solo las relevantes)
                    with st.expander("üìä An√°lisis Detallado de Contribuciones", expanded=True):
                        if es_modelo_prima:
                            st.subheader("üõ°Ô∏è Contribuci√≥n a la Prima")
                            contrib_df_prima = pd.DataFrame({
                                'Variable': list(resultados['contrib_prima'].keys()),
                                'Impacto en Prima': [f"{v:+.1f}%" for v in resultados['contrib_prima'].values()],  
                                'Efecto': ['üìà Aumenta' if v > 0 else 'üìâ Reduce' for v in resultados['contrib_prima'].values()]
                            })
                            st.dataframe(contrib_df_prima, width='stretch', height=200, hide_index=True)
                        
                        else:
                            st.subheader("üìà Contribuci√≥n a la Tasa")
                            contrib_df_tasa = pd.DataFrame({
                                'Variable': list(resultados['contrib_tasa'].keys()),
                                'Impacto en Tasa': [f"{v:+.1f}%" for v in resultados['contrib_tasa'].values()],
                                'Efecto': ['üìà Aumenta' if v > 0 else 'üìâ Reduce' for v in resultados['contrib_tasa'].values()]
                            })
                            st.dataframe(contrib_df_tasa, width='stretch', height=200, hide_index=True)
                    
                    # Preparar resultado para descarga
                    resultado_descarga = {
                        'fecha_calculo': datetime.now().isoformat(),
                        'codigo_municipio': codigo_municipio,
                        'superficie': superficie,
                        'modelo_usado': modelo_valor['nombre_modelo'],
                    }
                    
                    # Agregar solo los resultados calculados
                    if es_modelo_tasa:
                        resultado_descarga.update({
                            'tasa_descuento': resultados['tasa_descuento'],
                            'contribuciones_tasa': resultados['contrib_tasa']
                        })
                    elif es_modelo_prima:
                        resultado_descarga.update({
                            'prima_riesgo': resultados['prima_riesgo'],
                            'contribuciones_prima': resultados['contrib_prima']
                        })

                    st.download_button(
                        "üì• Descargar Informe JSON",
                        data=json.dumps(resultado_descarga, indent=2, ensure_ascii=False),
                        file_name=f"calculo_{codigo_municipio}_{datetime.now().strftime('%Y%m%d_%H%M')}.json",
                        mime="application/json",
                        width='stretch'
                    )
            else:
                st.info("‚ÑπÔ∏è Complete los datos y haga clic en el bot√≥n para obtener resultados")

def validar_fila_para_modelo(fila: pd.Series, modelo_clave: str) -> Tuple[bool, List[str]]:
    """Valida que una fila tenga las columnas requeridas para el modelo especificado"""
    errores = []
    
    # Columnas requeridas para todos los modelos
    columnas_requeridas_base = ['codigo_municipio', 'superficie', 'dormitorios', 'banos', 'planta']
    
    # Columnas espec√≠ficas por tipo de modelo - SOLO TASA/PRIMA
    columnas_requeridas = columnas_requeridas_base + ['antiguedad', 'ascensor', 'rehabilitacion', 'calidad_alta', 'estado_conservacion']
    
    # Verificar columnas requeridas
    for columna in columnas_requeridas:
        if columna not in fila.index:
            errores.append(f"Falta columna requerida: {columna}")
        elif pd.isna(fila[columna]):
            errores.append(f"Valor faltante en columna: {columna}")
    
    # Validar tipos de datos b√°sicos
    if 'superficie' in fila and not pd.isna(fila['superficie']):
        try:
            float(fila['superficie'])
        except (ValueError, TypeError):
            errores.append("Superficie debe ser num√©rica")
    
    if 'codigo_municipio' in fila and not pd.isna(fila['codigo_municipio']):
        try:
            str(fila['codigo_municipio'])
        except (ValueError, TypeError):
            errores.append("C√≥digo municipio debe ser texto o n√∫mero")
    
    return len(errores) == 0, errores

def procesar_fila_multiple(fila: pd.Series, modelo_tasacion, modelo_seleccionado: str) -> Tuple[bool, Dict, str]:
    """Procesa una fila individual del Excel y retorna resultado o error"""
    try:
        # Validar que la fila tenga datos b√°sicos
        if pd.isna(fila['codigo_municipio']) or pd.isna(fila['superficie']):
            return False, {}, "Datos b√°sicos faltantes (c√≥digo municipio o superficie)"
        
        # Obtener modelo
        modelo_obj = modelo_tasacion.modelos.get(modelo_seleccionado)
        if not modelo_obj:
            return False, {}, f"Modelo '{modelo_seleccionado}' no encontrado"
        
        # Preparar datos seg√∫n tipo de modelo
        codigo_municipio = str(fila['codigo_municipio'])
        superficie = float(fila['superficie'])
        
        # Modelo de tasa o prima
        datos = {
            'superficie': superficie,
            'antiguedad': float(fila.get('antiguedad', 0)),
            'dormitorios': int(fila.get('dormitorios', 0)),
            'banos': int(fila.get('banos', 0)),
            'planta': int(fila.get('planta', 0)),
            'ascensor': bool(fila.get('ascensor', False)),
            'rehabilitacion': bool(fila.get('rehabilitacion', False)),
            'calidad_alta': bool(fila.get('calidad_alta', False)),
            'estado_alto': str(fila.get('estado_conservacion', '')).lower() in ["buena", "muy buena", "√≥ptima"],
            'vivienda_nueva': bool(fila.get('vivienda_nueva', False))
        }
        
        if modelo_seleccionado == 'testigos_tasa':
            resultado, contribuciones, mensaje_error = modelo_tasacion.calcular_tasa_descuento(datos, codigo_municipio)
            if mensaje_error:  # Si hay mensaje de error, retornar error
                return False, {}, mensaje_error
                
            return True, {
                'tipo': 'tasa',
                'valor': resultado,
                'contribuciones': contribuciones,
                'modelo': modelo_obj['nombre_modelo'],
                'codigo_municipio': codigo_municipio,
                'superficie': superficie
            }, ""
        else: # testigos_prima
            resultado, contribuciones, mensaje_error = modelo_tasacion.calcular_prima_riesgo(datos, codigo_municipio)
            if mensaje_error:  # Si hay mensaje de error, retornar error
                return False, {}, mensaje_error
                
            return True, {
                'tipo': 'prima',
                'valor': resultado,
                'contribuciones': contribuciones,
                'modelo': modelo_obj['nombre_modelo'],
                'codigo_municipio': codigo_municipio,
                'superficie': superficie
            }, ""
            
    except Exception as e:
        return False, {}, f"Error en procesamiento: {str(e)}"

def crear_plantilla_fallback(modelo_tipo: str = "tasa"):
    """Crea una plantilla b√°sica seg√∫n el tipo de modelo"""
    # Datos de ejemplo para tasa/prima
    sample_data = {
        'codigo_municipio': ['2005', '2006', '2007'],
        'superficie': [85.5, 120.0, 65.0],
        'dormitorios': [3, 4, 2],
        'banos': [2, 3, 1],
        'planta': [2, 3, 1],
        'antiguedad': [15, 20, 10],
        'ascensor': [True, True, False],
        'rehabilitacion': [False, True, False],
        'calidad_alta': [False, True, False],
        'estado_conservacion': ['Buena', 'Muy buena', 'Regular'],
        'vivienda_nueva': [False, True, False]
    }
    
    df_fallback = pd.DataFrame(sample_data)
    
    # Crear Excel en memoria
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df_fallback.to_excel(writer, index=False, sheet_name='Plantilla')
    
    excel_data = output.getvalue()
    
    nombre_archivo = f"plantilla_{modelo_tipo}_basica.xlsx"
    
    st.download_button(
        f"üì• Descargar plantilla para {modelo_tipo}",
        data=excel_data,
        file_name=nombre_archivo,
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        width='stretch'
    )
    
def pagina_tasacion_multiple():
    """Pesta√±a para c√°lculo m√∫ltiple por lotes - SOLO TASA Y PRIMA"""
    st.header("üìÅ C√°lculo M√∫ltiple por Lotes")
    
    with st.expander("‚ÑπÔ∏è Informaci√≥n sobre c√°lculo m√∫ltiple", expanded=False):
        st.markdown("""
        **Caracter√≠sticas del c√°lculo por lotes:**
        - Procesamiento simult√°neo de m√∫ltiples inmuebles
        - Validaci√≥n autom√°tica de datos
        - Detecci√≥n y reporte de errores por fila
        - Generaci√≥n de informe consolidado
        - L√≠mite: 500 registros por lote
        
        **Columnas requeridas en el Excel:**
        - `codigo_municipio`: C√≥digo del municipio (ej: 2005, 2006, etc.)
        - `superficie`: Superficie en m¬≤ (n√∫mero)
        - `dormitorios`: N√∫mero de dormitorios
        - `banos`: N√∫mero de ba√±os
        - `planta`: Planta del inmueble
        - `antiguedad`: Antig√ºedad en a√±os
        - `ascensor`: S√≠/No o 1/0
        - `rehabilitacion`: S√≠/No o 1/0
        - `calidad_alta`: S√≠/No o 1/0
        - `estado_conservacion`: Texto (Muy deficiente, Deficiente, Regular, Buena, Muy buena, √ìptima)
        - `vivienda_nueva`: S√≠/No o 1/0
        """)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Selector de modelo para el lote completo
        modelo_lote = st.selectbox(
            "Seleccione el modelo a aplicar:",
            options=['testigos_tasa', 'testigos_prima'],
            format_func=lambda x: "Tasa Descuento" if x == 'testigos_tasa' else "Prima Riesgo",
            help="Elija el modelo a aplicar a todo el lote de datos",
            key="select_modelo_lote"
        )
        
        uploaded_file = st.file_uploader(
            "üì§ Subir archivo Excel para c√°lculo m√∫ltiple", 
            type=['xlsx', 'xls'],
            help=f"El archivo debe contener las columnas requeridas para {modelo_lote}"
        )
        
        if uploaded_file is not None:
            try:
                df = pd.read_excel(uploaded_file)
                
                print(f"‚úÖ Archivo cargado correctamente - {len(df)} registros detectados")
                
                # Estad√≠sticas
                col_stats1, col_stats2, col_stats3 = st.columns(3)
                with col_stats1:
                    st.metric("Registros", len(df))
                with col_stats2:
                    st.metric("Modelo", "Tasa" if modelo_lote == 'testigos_tasa' else "Prima")
                with col_stats3:
                    st.metric("Municipios", df['codigo_municipio'].nunique() if 'codigo_municipio' in df.columns else 0)
                
                # Procesar lote
                if st.button("üöÄ Procesar Lote Completo", type="primary", width='stretch'):
                    with st.spinner(f"Procesando {len(df)} registros..."):
                        resultados_exitosos = []
                        resultados_detallados = []
                        errores_detallados = []
                        
                        for idx, fila in df.iterrows():
                            numero_fila = idx + 2  # +2 porque Excel empieza en 1 y tiene headers
                            
                            # Validar fila primero
                            es_valida, errores_validacion = validar_fila_para_modelo(fila, modelo_lote)
                            
                            if not es_valida:
                                errores_detallados.append({
                                    'fila': numero_fila,
                                    'estado': '‚ùå ERROR',
                                    'codigo_municipio': str(fila.get('codigo_municipio', 'N/A')),
                                    'error': f"Errores validaci√≥n: {', '.join(errores_validacion)}"
                                })
                                continue
                            
                            # Procesar fila individual
                            es_exitosa, resultado, mensaje_error = procesar_fila_multiple(
                                fila, st.session_state.modelo, modelo_lote
                            )
                            
                            if es_exitosa:
                                resultados_exitosos.append(resultado)
                                resultados_detallados.append({
                                    'fila': numero_fila,
                                    'estado': '‚úÖ √âXITO',
                                    'modelo': resultado['modelo'],
                                    'codigo_municipio': resultado['codigo_municipio'],
                                    'superficie': resultado['superficie'],
                                    'resultado': format_resultado_multiple(resultado),
                                    'detalles': obtener_detalles_contribuciones(resultado)
                                })
                            else:
                                errores_detallados.append({
                                    'fila': numero_fila,
                                    'estado': '‚ùå ERROR',
                                    'codigo_municipio': str(fila.get('codigo_municipio', 'N/A')),
                                    'error': mensaje_error
                                })
                        
                        # MOSTRAR RESULTADOS DEL PROCESAMIENTO
                        st.subheader("üìä Resultados del Procesamiento")
                        
                        col_res1, col_res2, col_res3 = st.columns(3)
                        with col_res1:
                            st.metric("Procesadas correctamente", len(resultados_exitosos))
                        with col_res2:
                            st.metric("Errores", len(errores_detallados))
                        
                        # Pesta√±as para resultados detallados - ELIMINAR CONSOLIDADO
                        tab_resultados, tab_errores = st.tabs([
                            f"‚úÖ Resultados ({len(resultados_exitosos)})",
                            f"‚ùå Errores ({len(errores_detallados)})"
                        ])
                        
                        with tab_resultados:
                            if resultados_detallados:
                                df_resultados = pd.DataFrame(resultados_detallados)
                                st.dataframe(df_resultados, width='stretch')
                                
                                # BOT√ìN DE DESCARGA EN RESULTADOS
                                if resultados_exitosos:
                                    # Crear DataFrame para descarga
                                    datos_descarga = []
                                    for resultado in resultados_exitosos:
                                        fila_descarga = {
                                            'fila': resultados_detallados[resultados_exitosos.index(resultado)]['fila'],
                                            'modelo': resultado['modelo'],
                                            'codigo_municipio': resultado['codigo_municipio'],
                                            'superficie': resultado['superficie'],
                                            'resultado': resultado['valor']
                                        }
                                        
                                        # Agregar factores m√°s influyentes
                                        todas_contribuciones = obtener_detalles_contribuciones(resultado['contribuciones'])
                                        fila_descarga.update(todas_contribuciones)
                                        
                                        datos_descarga.append(fila_descarga)
                                    
                                    df_descarga = pd.DataFrame(datos_descarga)
                                    
                                    # Descargar como Excel
                                    output = io.BytesIO()
                                    with pd.ExcelWriter(output, engine='openpyxl') as writer:
                                        df_descarga.to_excel(writer, index=False, sheet_name='Resultados')
                                    
                                    excel_data = output.getvalue()
                                    st.download_button(
                                        "üìä Descargar Excel con Resultados",
                                        data=excel_data,
                                        file_name=f"resultados_{modelo_lote}_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx",
                                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                        width='stretch'
                                    )
                            else:
                                st.info("No hay resultados exitosos para mostrar")
                        
                        with tab_errores:
                            if errores_detallados:
                                df_errores = pd.DataFrame(errores_detallados)
                                st.dataframe(df_errores, width='stretch')
                                
                                # COMENTAR Mostrar an√°lisis de errores
                                # st.subheader("üìà An√°lisis de Errores")
                                # errores_por_tipo = df_errores['error'].value_counts()
                                # st.bar_chart(errores_por_tipo)
                            else:
                                st.success("üéâ No se encontraron errores en el procesamiento")

            except Exception as e:
                st.error(f"‚ùå Error procesando el archivo: {str(e)}")
    
    with col2:
        st.subheader("üìã Plantilla de Ejemplo")
        
        # Cargar plantilla existente desde assets
        plantilla_path = "assets/plantilla_tasacion_basica.xlsx"
        
        # Buscar la plantilla en diferentes ubicaciones posibles
        posibles_rutas = [
            plantilla_path,
            f"/app/{plantilla_path}",
            f"/app/assets/plantilla_tasacion_basica.xlsx",
            "./assets/plantilla_tasacion_basica.xlsx",
            "plantilla_tasacion_basica.xlsx"
        ]
        
        plantilla_encontrada = None
        for ruta in posibles_rutas:
            if os.path.exists(ruta):
                plantilla_encontrada = ruta
                break
        
        if plantilla_encontrada:
            try:
                # Leer el archivo Excel existente
                with open(plantilla_encontrada, "rb") as file:
                    excel_data = file.read()
                
                # Bot√≥n para descargar plantilla
                tipo_modelo = "tasa" if modelo_lote == 'testigos_tasa' else "prima"
                st.download_button(
                    f"üì• Descargar plantilla para {tipo_modelo}",
                    data=excel_data,
                    file_name=f"plantilla_{tipo_modelo}_basica.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    help=f"Descargue la plantilla para c√°lculo de {tipo_modelo}",
                    width='stretch'
                )
                
            except Exception as e:
                st.error(f"‚ùå Error cargando plantilla: {e}")
                # Fallback: crear plantilla b√°sica
                st.warning("Usando plantilla b√°sica de respaldo...")
                crear_plantilla_fallback(modelo_lote.split('_')[-1])  # 'tasa' o 'prima'
        else:
            st.error("‚ùå No se encontr√≥ la plantilla en assets/")
            st.info("Creando plantilla de respaldo...")
            crear_plantilla_fallback(modelo_lote.split('_')[-1])

        st.markdown("---")
        st.markdown("### üí° Consejos para el formato")
        st.write("‚Ä¢ **Formato Excel**: Use .xlsx para mejor compatibilidad")
        st.write("‚Ä¢ **Booleanos**: Use VERDADERO/FALSO, True/False, S√≠/No, o 1/0")
        st.write("‚Ä¢ **Estado conservaci√≥n**: Use Muy deficiente, Deficiente, Regular, Buena, Muy buena, u √ìptima")
        st.write("‚Ä¢ **Codificaci√≥n**: UTF-8 para caracteres especiales")

# Funciones auxiliares para el procesamiento m√∫ltiple
def format_resultado_multiple(resultado: Dict) -> str:
    """Formatea el resultado para mostrar en tabla"""
    if resultado['tipo'] == 'tasa':
        return f"{resultado['valor']:.2%}"
    elif resultado['tipo'] == 'prima':
        return f"{resultado['valor']:.2%}"
    return "N/A"

def obtener_detalles_contribuciones(contribuciones: Dict) -> str:
    """Obtiene todas las contribuciones como columnas separadas"""
    factores_dict = {}
    
    if contribuciones:
        # Convertir los valores de porcentaje a n√∫meros flotantes para ordenar
        contribs_numericas = []
        for factor, impacto in contribuciones.items():
            try:
                # Remover el s√≠mbolo % y convertir a float
                if isinstance(impacto, str):
                    valor_numerico = float(impacto.replace('%', '').replace('+', ''))
                else:
                    valor_numerico = float(impacto)
                contribs_numericas.append((factor, valor_numerico, impacto))
            except (ValueError, TypeError):
                # Si no se puede convertir, usar 0
                contribs_numericas.append((factor, 0.0, impacto))
        
        # Ordenar por impacto absoluto (de mayor a menor)
        contribs_ordenadas = sorted(contribs_numericas, 
                                  key=lambda x: abs(x[1]), reverse=True)
        
        # Agregar TODAS las contribuciones
        for i, (factor, valor_numerico, impacto_str) in enumerate(contribs_ordenadas, 1):
            # Limpiar nombre del factor
            nombre_limpio = factor.replace('contrib_', '').replace('_', ' ').title()
            # Reemplazar nombres espec√≠ficos para mejor legibilidad
            nombre_limpio = nombre_limpio.replace('Tasa Base', 'Componente Base')
            nombre_limpio = nombre_limpio.replace('Prima Base', 'Componente Base')
            nombre_limpio = nombre_limpio.replace('Municipio', 'Efecto Municipio')
            
            factores_dict[f'factor_{i}'] = nombre_limpio
            factores_dict[f'impacto_{i}'] = f"{valor_numerico:+.1f}%"
    
    return factores_dict

def pagina_documentacion():
    """Pesta√±a de documentaci√≥n t√©cnica """
    if not st.session_state.config_sistema:
        st.error("No se pudo cargar la configuraci√≥n del sistema")
        return
        
    config = st.session_state.config_sistema
    doc_config = config.get('documentacion', {})
    
    st.header("üìö Documentaci√≥n T√©cnica - Modelos ECO 805")
    
    # Introducci√≥n desde YAML 
    introduccion = doc_config.get('introduccion', 'Sistema para c√°lculo de Tasa de Descuento y Prima de Riesgo basado en an√°lisis de regresi√≥n m√∫ltiple.')
    st.markdown(f"""
    <div style='background: #f0f2f6; padding: 2rem; border-radius: 10px; border-left: 4px solid #1f77b4;'>
        <h4 style='color: #1f77b4; margin-top: 0;'>Modelos Econom√©tricos para Tasa y Prima</h4>
        <p style='margin-bottom: 0;'>{introduccion}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Metodolog√≠a desde YAML
    st.subheader("üî¨ Metodolog√≠a Cient√≠fica")
    
    col_metodo1, col_metodo2 = st.columns(2)
    
    with col_metodo1:
        st.markdown("**Bases de Datos:**")
        for item in doc_config.get('metodologia', {}).get('base_datos', []):
            st.write(f"- {item}")
        
        st.markdown("**Procesamiento:**")
        for item in doc_config.get('metodologia', {}).get('procesamiento', []):
            st.write(f"- {item}")
    
    with col_metodo2:
        st.markdown("**Validaci√≥n Estad√≠stica:**")
        for item in doc_config.get('metodologia', {}).get('validacion', []):
            st.write(f"- {item}")
        
        st.markdown("**Software Utilizado:**")
        for item in doc_config.get('metodologia', {}).get('software', []):
            st.write(f"- {item}")
    
    # Modelos matem√°ticos - SOLO TASA Y PRIMA
    st.subheader("üßÆ Modelos Matem√°ticos Implementados")
    
    tab_model1, tab_model2 = st.tabs(["Tasa Descuento", "Prima Riesgo"])
        
    with tab_model1:
        st.markdown("""
        ### Modelo de Tasa de Descuento
        
        $$Tasa_i = \\beta_0 + \\sum_{j=1}^{J}\\beta_j X_{ji} + \\epsilon_i$$
        
        **Componentes:**
        - Tasa libre de riesgo (bonos estado 5 a√±os)
        - Prima de riesgo espec√≠fica del inmueble
        
        **Variables Significativas:**
        - **SU**: Superficie construida (efecto positivo marginal)
        - **antig**: Antig√ºedad del inmueble (efecto positivo - mayor riesgo)
        - **Dnueva**: Vivienda nueva (< 5 a√±os) - dummy
        - **NB**: N√∫mero de ba√±os (efecto negativo - reduce riesgo)
        - **ND**: N√∫mero de dormitorios
        - **DAS**: Ascensor (efecto negativo - reduce riesgo)
        - **EC_Alto**: Estado de conservaci√≥n alto (efecto negativo - reduce riesgo)
        - **rehab**: Rehabilitaci√≥n del edificio - dummy
        - **CC_Alta**: Calidad constructiva alta - dummy
        - **_cons**: T√©rmino constante (tasa base)
        """)
        
        st.latex(r"""
        \text{Tasa Descuento} = \text{Tasa Libre Riesgo} + \text{Prima Riesgo}
        """)

    with tab_model2:
        st.markdown("""
        ### Modelo de Prima de Riesgo
        
        $$Prima_i = \\beta_0 + \\sum_{j=1}^{J}\\beta_j X_{ji} + \\epsilon_i$$
        
        **Factores de Riesgo Considerados:**
        - Riesgo de ubicaci√≥n (municipio)
        - Riesgo por antig√ºedad y estado
        - Riesgo por caracter√≠sticas constructivas
        - Riesgo de mercado local
        
        **Variables Significativas:**
        - **SU**: Superficie construida
        - **antig**: Antig√ºedad del inmueble (aumenta prima consistentemente)
        - **Dnueva**: Vivienda nueva (< 5 a√±os) - dummy
        - **NB**: N√∫mero de ba√±os
        - **ND**: N√∫mero de dormitorios
        - **DAS**: Ascensor (reduce prima)
        - **EC_Alto**: Estado de conservaci√≥n alto (reduce prima)
        - **rehab**: Rehabilitaci√≥n del edificio - dummy
        - **CC_Alta**: Calidad constructiva alta - dummy (efecto variable)
        - **_cons**: T√©rmino constante (prima base)
        
        **Hallazgos Clave:**
        - Municipios peque√±os: mayor prima por iliquidez
        - Antig√ºedad: aumenta prima consistentemente
        - Ascensor y buen estado: reducen prima
        - Calidad constructiva: efecto variable
        """)

    # st.subheader("üèôÔ∏è Segmentaci√≥n por Tama√±o Municipal")
    
    # col_seg1, col_seg2, col_seg3, col_seg4 = st.columns(4)
    
    # # Obtener modelos disponibles desde la configuraci√≥n
    # modelos_config = config.get('modelos_disponibles', [])
    
    # # Buscar los R¬≤ espec√≠ficos para cada modelo de valor
    # r2_menos_10000 = next((modelo.get('r2', '76.32%') for modelo in modelos_config if modelo.get('clave') == 'testigos_menos_10000'), '76.32%')
    # r2_10000_50000 = next((modelo.get('r2', '73.89%') for modelo in modelos_config if modelo.get('clave') == 'testigos_10000_50000'), '73.89%')
    # r2_50000_200000 = next((modelo.get('r2', '67.18%') for modelo in modelos_config if modelo.get('clave') == 'testigos_50000_200000'), '67.18%')
    # r2_mas_200000 = next((modelo.get('r2', '61.95%') for modelo in modelos_config if modelo.get('clave') == 'testigos_mas_200000'), '61.95%')

    # with col_seg1:
    #     st.metric("< 10,000 hab", f"R¬≤ = {r2_menos_10000}", "Mayor poder explicativo")
    # with col_seg2:
    #     st.metric("10,000-50,000", f"R¬≤ = {r2_10000_50000}", "Alta significatividad")
    # with col_seg3:
    #     st.metric("50,000-200,000", f"R¬≤ = {r2_50000_200000}", "Modelo robusto")
    # with col_seg4:
    #     st.metric("> 200,000 hab", f"R¬≤ = {r2_mas_200000}", "M√°xima complejidad")

    # st.markdown('''
    # **Hallazgos clave de los modelos econom√©tricos:**
    # - **R¬≤ decreciente con tama√±o municipal**: Mayor poder explicativo en municipios peque√±os (76.32%) vs grandes (61.95%)
    # - **Efecto superficie (SU)**: Negativo en municipios < 200k hab, positivo en grandes ciudades
    # - **Dormitorios (ND)**: Efecto negativo consistente en todos los modelos
    # - **Variables positivas**: Ba√±os (NB), ascensor (DAS), calidad alta (CC_Alta) y calefacci√≥n (DCA) siempre positivas
    # - **Planta (PLbis)**: Efecto positivo que se intensifica con el tama√±o municipal
    # ''')

def mostrar_footer():
    """Footer usando configuraci√≥n YAML"""
    import datetime
    current_year = datetime.datetime.now().year

    if not st.session_state.config_sistema:
        sistema_info = {'nombre': 'AESVAL - CTIC', 'version': 'v1.0'}
    else:
        sistema_info = st.session_state.config_sistema.get('sistema', {})
    
    st.markdown("---")
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown(
            f"""
            <div style='text-align: center; color: #666; padding:0;'>
                <p style='margin-bottom: 0; font-size: 0.9rem;'>
                    ¬© {sistema_info.get('a√±o', current_year)} <strong>{sistema_info.get('desarrollador', 'AESVAL - CTIC')}</strong> | 
                    {sistema_info.get('nombre', 'Sistema de C√°lculo de Tasa y Prima')} {sistema_info.get('version', 'v21.0')}
                </p>
                <p style='margin-bottom: 0; font-size: 0.8rem;'>
                    Desarrollado con Streamlit ‚Ä¢ Modelos Econom√©tricos STATA ‚Ä¢ 
                    <a href='https://www.boe.es/buscar/pdf/2003/BOE-A-2003-7253-consolidado.pdf' style='color: blue; text-decoration: underline;' target='_blank'>Normativa ECO/805</a> ‚Ä¢ 
                </p>
            </div>
            """, 
            unsafe_allow_html=True
        )

def main():
    """Funci√≥n principal"""
    inicializar_session_state()
    
    mostrar_header()
    mostrar_sidebar()
    
    tab1, tab2, tab3 = st.tabs([
        "üìö Documentaci√≥n T√©cnica", 
        "üè† C√°lculo Individual", 
        "üìÅ C√°lculo por Lotes"
    ])
    
    with tab1:
        pagina_documentacion()
    
    with tab2:
        pagina_tasacion_individual()
    
    with tab3:
        pagina_tasacion_multiple()
    
    mostrar_footer()

if __name__ == "__main__":
    main()