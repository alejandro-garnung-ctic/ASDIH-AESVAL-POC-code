import streamlit as st
import pandas as pd
import numpy as np
from typing import Dict, List, Optional, Tuple
import io
import base64
from datetime import datetime
import json
import yaml
import os

current_year = datetime.now().year

# Configuraci√≥n de p√°gina
st.set_page_config(
    page_title="AESVAL - Sistema de Tasaci√≥n Autom√°tico ECO 805",
    page_icon="üè†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Ocultar men√∫ de Streamlit
# hide_streamlit_style = """
#     <style>
    
#     /* Ocultar todo el header */
#     header {
#         opacity: 0;
#     }
    
#     /* Mostrar solo el bot√≥n de expandir/contraer sidebar */
#     button[data-testid="stExpandSidebarButton"] {
#         display: block !important;
#         position: fixed !important;
#         top: 10px !important;
#         left: 10px !important;
#         z-index: 999999 !important;
#         background: white !important;
#         border: 1px solid #ccc !important;
#         border-radius: 4px !important;
#         padding: 8px !important;
#         opacity: 1;
#     }
    
#     </style>
# """
# st.markdown(hide_streamlit_style, unsafe_allow_html=True)

def cargar_configuracion_sistema():
    """Carga la configuraci√≥n del sistema desde archivo YAML"""
    try:
        with open('config/info.yaml', 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    except FileNotFoundError:
        st.error("‚ùå No se encontr√≥ el archivo de configuraci√≥n del sistema: config/info.yaml")
        # Configuraci√≥n por defecto
        return {
            'sistema': {
                'nombre': 'Sistema de Tasaci√≥n Autom√°tico ECO 805',
                'version': '2.0',
                'actualizacion': '2025-01-10',
                'modelo': 'ECO 805 - An√°lisis Econom√©trico',
                'base_datos': '205,000+ testigos',
                'desarrollador': 'AESVAL - CTIC',
                'a√±o': 2025
            },
            'metricas': {
                'r2_promedio': '82%',
                'precision': '97.2%',
                'tiempo_procesamiento': '3 segundos por registro',
                'limite_registros': 500
            },
            'modelos_disponibles': [
                {'clave': 'testigos_menos_10000', 'nombre': 'Municipios < 10,000 hab'},
                {'clave': 'testigos_10000_50000', 'nombre': 'Municipios 10,000-50,000 hab'},
                {'clave': 'testigos_50000_200000', 'nombre': 'Municipios 50,000-200,000 hab'},
                {'clave': 'testigos_mas_200000', 'nombre': 'Municipios > 200,000 hab'},
                {'clave': 'testigos_tasa', 'nombre': 'Modelo Tasa Descuento'},
                {'clave': 'testigos_prima', 'nombre': 'Modelo Prima Riesgo'}
            ]
        }
    except Exception as e:
        st.error(f"‚ùå Error cargando configuraci√≥n del sistema: {e}")
        return None

def cargar_modelos_json():
    """Carga los modelos desde archivos JSON en config/"""
    modelos = {}
    
    # Mapeo exacto seg√∫n los nombres de tus archivos
    mapeo_modelos = {
        'modelo_Testigos_menos_de_10000': 'testigos_menos_10000',
        'modelo_Testigos_10000-50000': 'testigos_10000_50000', 
        'modelo_Testigos_50000-200000': 'testigos_50000_200000',
        'modelo_Testigos_m√°s_de_200000': 'testigos_mas_200000',
        'modelo_Testigos_Prima': 'testigos_prima',
        'modelo_Testigos_Tasa': 'testigos_tasa'
    }
    
    for archivo, clave in mapeo_modelos.items():
        try:
            ruta = f"config/{archivo}.json"
            if os.path.exists(ruta):
                with open(ruta, 'r', encoding='utf-8') as f:
                    modelos[clave] = json.load(f)
                    print(f"‚úÖ Modelo {clave} cargado correctamente")
            else:
                # Buscar archivos similares
                archivos_disponibles = [f for f in os.listdir('config') if f.endswith('.json')]
                archivo_encontrado = None
                
                # Buscar coincidencias aproximadas
                for archivo_disp in archivos_disponibles:
                    archivo_sin_ext = archivo_disp.replace('.json', '')
                    if archivo_sin_ext.lower().replace('_', '-').replace('√°', 'a') == archivo.lower().replace('_', '-').replace('√°', 'a'):
                        archivo_encontrado = archivo_disp
                        break
                
                if archivo_encontrado:
                    ruta_alternativa = f"config/{archivo_encontrado}"
                    with open(ruta_alternativa, 'r', encoding='utf-8') as f:
                        modelos[clave] = json.load(f)
                    st.success(f"‚úÖ Modelo {clave} cargado desde {archivo_encontrado}")
                else:
                    st.warning(f"‚ö†Ô∏è No se encontr√≥ {ruta} (archivos disponibles: {', '.join(archivos_disponibles)})")
                    
        except Exception as e:
            st.error(f"‚ùå Error cargando {archivo}: {e}")
    
    return modelos

def get_image_base64(path):
    """Carga im√°genes y las convierte a base64"""
    import os
    possible_paths = [
        f"/app/{path}",           
        f"/app/assets/{path.split('/')[-1]}", 
        f"./{path}",
        f"assets/{path}",
    ]
    
    for img_path in possible_paths:
        try:
            if os.path.exists(img_path):
                with open(img_path, "rb") as image_file:
                    return base64.b64encode(image_file.read()).decode()
        except:
            continue
    return None

def es_modelo_tasa_o_prima(nombre_modelo: str) -> bool:
    """Determina si el modelo es de Tasa o Prima"""
    return 'tasa' in nombre_modelo.lower() or 'prima' in nombre_modelo.lower()

def es_modelo_valor(nombre_modelo: str) -> bool:
    """Determina si el modelo es de valor normal"""
    return not es_modelo_tasa_o_prima(nombre_modelo)

class ModeloTasacion:
    """Clase para gestionar los modelos de tasaci√≥n"""
    
    def __init__(self, modelos_json: Dict):
        self.modelos = modelos_json
    
    def obtener_modelos_disponibles(self) -> List[Tuple[str, str]]:
        """Retorna la lista de modelos disponibles con nombres legibles desde YAML"""
        # Intentar obtener desde la configuraci√≥n YAML
        if hasattr(st.session_state, 'config_sistema') and st.session_state.config_sistema:
            modelos_config = st.session_state.config_sistema.get('modelos_disponibles', [])
            disponibles = []
            for modelo_config in modelos_config:
                clave = modelo_config.get('clave')
                nombre = modelo_config.get('nombre')
                if clave in self.modelos: # Solo incluir modelos que est√©n cargados
                    disponibles.append((clave, nombre))
            
            if disponibles:
                return disponibles
        
        # Fallback a nombres por defecto
        nombres_legibles = {
            'testigos_menos_10000': 'Municipios < 10,000 hab',
            'testigos_10000_50000': 'Municipios 10,000-50,000 hab',
            'testigos_50000_200000': 'Municipios 50,000-200,000 hab',
            'testigos_mas_200000': 'Municipios > 200,000 hab',
            'testigos_tasa': 'Modelo Tasa Descuento',
            'testigos_prima': 'Modelo Prima Riesgo'
        }
        
        disponibles = []
        for clave in self.modelos.keys():
            nombre = nombres_legibles.get(clave, clave)
            disponibles.append((clave, nombre))
        
        return disponibles

    def obtener_modelo(self, nombre_modelo: str) -> Optional[Dict]:
        """Obtiene el modelo por su nombre"""
        return self.modelos.get(nombre_modelo)
    
    def calcular_valor_m2(self, datos: Dict, modelo: Dict, codigo_municipio: str) -> Tuple[float, Dict]:
        """Calcula el valor por m¬≤ usando el modelo especificado"""
        coef_municipio = modelo['coeficientes_municipios'].get(str(codigo_municipio), 0)
        coef_variables = modelo['coeficientes_variables']
        _cons = modelo['_cons']
        
        contribuciones = {}
        contribuciones_porcentaje = {}
        
        # Valor base (constante + efecto municipio)
        valor_base = _cons + coef_municipio
        contribuciones['valor_base'] = valor_base
        contribuciones[f'municipio_{codigo_municipio}'] = coef_municipio
        
        # Aplicar coeficientes seg√∫n variables disponibles
        if datos.get('vivienda_nueva') and 'Dnueva' in coef_variables and coef_variables['Dnueva'] is not None:
            contrib = coef_variables['Dnueva']
            valor_base += contrib
            contribuciones['vivienda_nueva'] = contrib
        
        if 'SU' in coef_variables and coef_variables['SU'] is not None and datos.get('superficie'):
            contrib = coef_variables['SU'] * datos['superficie']
            valor_base += contrib
            contribuciones['superficie'] = contrib
        
        if datos.get('calefaccion') and 'DCA' in coef_variables and coef_variables['DCA'] is not None:
            contrib = coef_variables['DCA']
            valor_base += contrib
            contribuciones['calefaccion'] = contrib
        
        if 'ND' in coef_variables and coef_variables['ND'] is not None and datos.get('dormitorios'):
            contrib = coef_variables['ND'] * datos['dormitorios']
            valor_base += contrib
            contribuciones['dormitorios'] = contrib
        
        if 'NB' in coef_variables and coef_variables['NB'] is not None and datos.get('banos'):
            contrib = coef_variables['NB'] * datos['banos']
            valor_base += contrib
            contribuciones['banos'] = contrib
        
        if datos.get('calidad_alta') and 'CC_Alta' in coef_variables and coef_variables['CC_Alta'] is not None:
            contrib = coef_variables['CC_Alta']
            valor_base += contrib
            contribuciones['calidad_alta'] = contrib
        
        if datos.get('ascensor') and 'DAS' in coef_variables and coef_variables['DAS'] is not None:
            contrib = coef_variables['DAS']
            valor_base += contrib
            contribuciones['ascensor'] = contrib
        
        if 'PLbis' in coef_variables and coef_variables['PLbis'] is not None and datos.get('planta'):
            contrib = coef_variables['PLbis'] * datos['planta']
            valor_base += contrib
            contribuciones['planta'] = contrib
        
        valor_final = max(0, valor_base)
        
        # CALCULAR PORCENTAJES RELATIVOS
        if valor_final > 0:
            for key, value in contribuciones.items():
                contribuciones_porcentaje[key] = (value / valor_final) * 100 # En porcentaje
        
        return valor_final, contribuciones_porcentaje # ‚Üê Devuelve porcentajes
    
    def calcular_tasa_descuento(self, datos: Dict, codigo_municipio: str) -> Tuple[float, Dict]:
        """Calcula la tasa de descuento usando el modelo correspondiente INCLUYENDO MUNICIPIO"""
        
        # Obtener el modelo de tasa desde los JSON cargados
        modelo_tasa = self.modelos.get('testigos_tasa')
        if not modelo_tasa:
            st.error("‚ùå No se encontr√≥ el modelo de tasa en los archivos JSON")
            return 0.05, {}
        
        # Usar los coeficientes reales del modelo JSON
        coef_municipio = modelo_tasa['coeficientes_municipios'].get(str(codigo_municipio), 0)
        coef_variables = modelo_tasa['coeficientes_variables']
        _cons = modelo_tasa['_cons']
        
        contribuciones = {}
        contribuciones_porcentaje = {}
        
        # Tasa base (constante + efecto municipio)
        tasa_base = _cons + coef_municipio
        contribuciones['tasa_base'] = tasa_base
        contribuciones[f'municipio_{codigo_municipio}'] = coef_municipio
        
        # Aplicar coeficientes seg√∫n variables disponibles usando los coeficientes reales
        if 'SU' in coef_variables and coef_variables['SU'] is not None and datos.get('superficie'):
            contrib = coef_variables['SU'] * datos['superficie']
            tasa_base += contrib
            contribuciones['superficie'] = contrib
        
        if 'antig' in coef_variables and coef_variables['antig'] is not None and datos.get('antiguedad'):
            contrib = coef_variables['antig'] * datos['antiguedad']
            tasa_base += contrib
            contribuciones['antiguedad'] = contrib
        
        if datos.get('vivienda_nueva') and 'Dnueva' in coef_variables and coef_variables['Dnueva'] is not None:
            contrib = coef_variables['Dnueva']
            tasa_base += contrib
            contribuciones['vivienda_nueva'] = contrib
        
        if 'NB' in coef_variables and coef_variables['NB'] is not None and datos.get('banos'):
            contrib = coef_variables['NB'] * datos['banos']
            tasa_base += contrib
            contribuciones['banos'] = contrib
        
        if 'ND' in coef_variables and coef_variables['ND'] is not None and datos.get('dormitorios'):
            contrib = coef_variables['ND'] * datos['dormitorios']
            tasa_base += contrib
            contribuciones['dormitorios'] = contrib
        
        if datos.get('ascensor') and 'DAS' in coef_variables and coef_variables['DAS'] is not None:
            contrib = coef_variables['DAS']
            tasa_base += contrib
            contribuciones['ascensor'] = contrib
        
        if datos.get('estado_alto') and 'EC_Alto' in coef_variables and coef_variables['EC_Alto'] is not None:
            contrib = coef_variables['EC_Alto']
            tasa_base += contrib
            contribuciones['estado_alto'] = contrib
        
        if datos.get('rehabilitacion') and 'rehab' in coef_variables and coef_variables['rehab'] is not None:
            contrib = coef_variables['rehab']
            tasa_base += contrib
            contribuciones['rehabilitacion'] = contrib
        
        # Asegurar que la tasa est√© en un rango razonable
        tasa_final = max(0.01, min(1.0, tasa_base))
        
        # CALCULAR PORCENTAJES RELATIVOS
        contribuciones_porcentaje = {}
        for key, value in contribuciones.items():
            contribuciones_porcentaje[key] = (value / tasa_final) * 100  
        
        return tasa_final, contribuciones_porcentaje

    def calcular_prima_riesgo(self, datos: Dict, codigo_municipio: str) -> Tuple[float, Dict]:
        """Calcula la prima de riesgo usando el modelo correspondiente INCLUYENDO MUNICIPIO"""
        
        # Obtener el modelo de prima desde los JSON cargados
        modelo_prima = self.modelos.get('testigos_prima')
        if not modelo_prima:
            st.error("‚ùå No se encontr√≥ el modelo de prima en los archivos JSON")
            return 0.02, {}
        
        # Usar los coeficientes reales del modelo JSON
        coef_municipio = modelo_prima['coeficientes_municipios'].get(str(codigo_municipio), 0)
        coef_variables = modelo_prima['coeficientes_variables']
        _cons = modelo_prima['_cons']
        
        contribuciones = {}
        contribuciones_porcentaje = {}
        
        # Prima base (constante + efecto municipio)
        prima_base = _cons + coef_municipio
        contribuciones['prima_base'] = prima_base
        contribuciones[f'municipio_{codigo_municipio}'] = coef_municipio
        
        # Aplicar coeficientes seg√∫n variables disponibles usando los coeficientes reales
        if 'SU' in coef_variables and coef_variables['SU'] is not None and datos.get('superficie'):
            contrib = coef_variables['SU'] * datos['superficie']
            prima_base += contrib
            contribuciones['superficie'] = contrib
        
        if 'antig' in coef_variables and coef_variables['antig'] is not None and datos.get('antiguedad'):
            contrib = coef_variables['antig'] * datos['antiguedad']
            prima_base += contrib
            contribuciones['antiguedad'] = contrib
        
        if datos.get('vivienda_nueva') and 'Dnueva' in coef_variables and coef_variables['Dnueva'] is not None:
            contrib = coef_variables['Dnueva']
            prima_base += contrib
            contribuciones['vivienda_nueva'] = contrib
        
        if 'NB' in coef_variables and coef_variables['NB'] is not None and datos.get('banos'):
            contrib = coef_variables['NB'] * datos['banos']
            prima_base += contrib
            contribuciones['banos'] = contrib
        
        if 'ND' in coef_variables and coef_variables['ND'] is not None and datos.get('dormitorios'):
            contrib = coef_variables['ND'] * datos['dormitorios']
            prima_base += contrib
            contribuciones['dormitorios'] = contrib
        
        if datos.get('ascensor') and 'DAS' in coef_variables and coef_variables['DAS'] is not None:
            contrib = coef_variables['DAS']
            prima_base += contrib
            contribuciones['ascensor'] = contrib
        
        if datos.get('estado_alto') and 'EC_Alto' in coef_variables and coef_variables['EC_Alto'] is not None:
            contrib = coef_variables['EC_Alto']
            prima_base += contrib
            contribuciones['estado_alto'] = contrib
        
        if datos.get('rehabilitacion') and 'rehab' in coef_variables and coef_variables['rehab'] is not None:
            contrib = coef_variables['rehab']
            prima_base += contrib
            contribuciones['rehabilitacion'] = contrib
        
        # Asegurar que la prima est√© en un rango razonable
        prima_final = max(0.01, min(1.0, prima_base))
        
        # CALCULAR PORCENTAJES RELATIVOS
        contribuciones_porcentaje = {}
        for key, value in contribuciones.items():
            contribuciones_porcentaje[key] = (value / prima_final) * 100 
        
        return prima_final, contribuciones_porcentaje

def inicializar_session_state():
    """Inicializa variables de session state"""
    if 'modelos_json' not in st.session_state:
        st.session_state.modelos_json = cargar_modelos_json()
    if 'modelo' not in st.session_state:
        st.session_state.modelo = ModeloTasacion(st.session_state.modelos_json)
    if 'resultados_individuales' not in st.session_state:
        st.session_state.resultados_individuales = []
    if 'config_sistema' not in st.session_state:
        st.session_state.config_sistema = cargar_configuracion_sistema()
    
    # Inicializar variables para persistencia de datos entre modelos
    if 'datos_persistentes' not in st.session_state:
        st.session_state.datos_persistentes = {
            'superficie': 80.0,
            'dormitorios': 3,
            'banos': 2,
            'planta': 2,
            'ascensor': True,
            'calidad_alta': False,
            'vivienda_nueva': False,
            'calefaccion': True,
            'antiguedad': 15,
            'rehabilitacion': False,
            'estado_conservacion': "Buena",
            'codigo_municipio': '2005', 
            'modelo_seleccionado': 'testigos_menos_10000' 
        }

def mostrar_header():
    """Header profesional con logos"""
    logo_aesval = get_image_base64("assets/aesval.png")
    logo_ctic = get_image_base64("assets/CTIC.png")
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col1:
        if logo_aesval:
            st.markdown(f'<div style="text-align: center;"><img src="data:image/png;base64,{logo_aesval}" width="150"></div>', unsafe_allow_html=True)
        else:
            st.markdown('<div style="text-align: center; background: linear-gradient(135deg, #1f77b4, #2e8bc0); padding: 30px; border-radius: 10px; color: white;"><h3>üè¢ AESVAL</h3><p style="font-size: 0.8rem;">Entidad Tasadora</p></div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div style='text-align: center; padding: 1rem 0;'>
            <h2 style='color: #1f77b4; margin-bottom: 0.5rem; font-size: 2.5rem;'>
                üè† SISTEMA DE TASACI√ìN
            </h2>
            <h4 style='color: #666; margin-top: 0; font-weight: 300;'>
                Modelos Econom√©tricos Basados en An√°lisis de Regresi√≥n
            </h4>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        if logo_ctic:
            st.markdown(f'<div style="text-align: center;"><img src="data:image/png;base64,{logo_ctic}" width="120"></div>', unsafe_allow_html=True)
        else:
            st.markdown('<div style="text-align: center; background: linear-gradient(135deg, #ff6b6b, #ff8e8e); padding: 30px; border-radius: 10px; color: white;"><h3>üî¨ CTIC</h3><p style="font-size: 0.8rem;">Centro Tecnol√≥gico</p></div>', unsafe_allow_html=True)
    
    st.markdown("---")

def mostrar_sidebar():
    """Sidebar con informaci√≥n del sistema cargada desde YAML"""
    if not st.session_state.config_sistema:
        st.error("No se pudo cargar la configuraci√≥n del sistema")
        return
        
    config = st.session_state.config_sistema
    sistema = config.get('sistema', {})
    metricas = config.get('metricas', {})
    modelos_config = config.get('modelos_disponibles', [])
    
    with st.sidebar:
        st.markdown(f"""
        <div style='background: linear-gradient(135deg, #1f77b4, #2e8bc0); padding: 2rem; border-radius: 10px; color: white; margin-bottom: 2rem;'>
            <h3 style='color: white; margin-bottom: 1rem;'>üìä {sistema.get('nombre', 'Sistema AESVAL ECO 805')}</h3>
            <p style='margin-bottom: 0; font-size: 0.9rem;'>
                Plataforma oficial para la tasaci√≥n inteligente de inmuebles seg√∫n normativa ECO 805
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("### ‚ÑπÔ∏è Informaci√≥n del Sistema")
        st.info(f"""
        **Versi√≥n:** {sistema.get('version', '2.0')}\n
        **Actualizaci√≥n:** {sistema.get('actualizacion', '2025-01-10')}\n
        **Modelo:** {sistema.get('modelo', 'ECO 805 - An√°lisis Econom√©trico')}\n
        **Base de datos:** {sistema.get('base_datos', '205,000+ testigos')}
        """)
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("R¬≤ Promedio", metricas.get('r2_promedio', '82%'))
        
        st.markdown("---")
        st.markdown("### üìà Modelos Disponibles")
        
        # Mostrar modelos desde la configuraci√≥n YAML
        for modelo in modelos_config:
            nombre = modelo.get('nombre', modelo.get('clave', ''))
            st.write(f"‚Ä¢ {nombre}")
        
        st.markdown("---")
        st.markdown(f"""
        <div style='text-align: center; color: #666; font-size: 0.8rem; padding: 1rem 0;'>
            <p>¬© {sistema.get('a√±o', current_year)} {sistema.get('desarrollador', 'AESVAL - CTIC')}</p>
            <p>Sistema de Tasaci√≥n Autom√°tico</p>
        </div>
        """, unsafe_allow_html=True)

def pagina_tasacion_individual():
    """Pesta√±a para tasaci√≥n individual con modelos reales - VERSI√ìN CORREGIDA"""
    st.header("üìä Tasaci√≥n Individual - Modelo ECO 805")
    
    with st.container():
        st.info("""
        üí° **Complete los datos del inmueble para obtener una tasaci√≥n precisa basada en modelos econom√©tricos 
        desarrollados con an√°lisis de regresi√≥n m√∫ltiple sobre 205,000+ observaciones.**
        """)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        with st.container():
            st.subheader("üèõÔ∏è Datos del Inmueble")
            
            col1_1, col1_2 = st.columns(2)
            
            with col1_1:
                # Selecci√≥n directa del modelo
                modelos_disponibles = st.session_state.modelo.obtener_modelos_disponibles()
                if not modelos_disponibles:
                    st.error("‚ùå No se cargaron modelos. Verifique los archivos JSON en config/")
                    st.stop()
                
                # Obtener modelo actual de datos persistentes
                modelo_actual = st.session_state.datos_persistentes.get('modelo_seleccionado', 'testigos_menos_10000')
                
                modelo_seleccionado = st.selectbox(
                    "Seleccione el modelo",
                    options=[clave for clave, _ in modelos_disponibles],
                    format_func=lambda x: next((nombre for clave, nombre in modelos_disponibles if clave == x), x),
                    help="Elija el modelo econom√©trico seg√∫n el tama√±o del municipio",
                    key="selectbox_modelo",
                    index=[clave for clave, _ in modelos_disponibles].index(modelo_actual) if modelo_actual in [clave for clave, _ in modelos_disponibles] else 0
                )
                
                # ACTUALIZAR DATOS PERSISTENTES INMEDIATAMENTE cuando cambia el modelo
                if modelo_seleccionado != st.session_state.datos_persistentes.get('modelo_seleccionado'):
                    st.session_state.datos_persistentes['modelo_seleccionado'] = modelo_seleccionado
                
                # Determinar tipo de modelo
                es_tasa_prima = es_modelo_tasa_o_prima(modelo_seleccionado)
                es_modelo_prima = modelo_seleccionado == 'testigos_prima'
                es_modelo_tasa = modelo_seleccionado == 'testigos_tasa'
                es_modelo_valor = not es_tasa_prima
                
                # C√≥digo del municipio (siempre visible)
                modelo_obj = st.session_state.modelo.obtener_modelo(modelo_seleccionado)
                codigos_disponibles = list(modelo_obj['coeficientes_municipios'].keys()) if modelo_obj and 'coeficientes_municipios' in modelo_obj else []
                
                if not codigos_disponibles:
                    st.error("‚ùå El modelo seleccionado no tiene c√≥digos de municipio disponibles")
                    st.stop()
                
                # Obtener municipio actual de datos persistentes
                municipio_actual = st.session_state.datos_persistentes.get('codigo_municipio', '2005')
                
                # Si el municipio actual no est√° disponible en el nuevo modelo, resetear al primero disponible
                if municipio_actual not in codigos_disponibles:
                    municipio_actual = codigos_disponibles[0]
                    st.session_state.datos_persistentes['codigo_municipio'] = municipio_actual
                
                codigo_municipio = st.selectbox(
                    "C√≥digo de Municipio",
                    options=codigos_disponibles,
                    index=codigos_disponibles.index(municipio_actual),
                    help="Seleccione el c√≥digo del municipio",
                    key="selectbox_municipio"
                )
                
                # ACTUALIZAR DATOS PERSISTENTES cuando cambia el municipio
                if codigo_municipio != st.session_state.datos_persistentes.get('codigo_municipio'):
                    st.session_state.datos_persistentes['codigo_municipio'] = codigo_municipio
                
                # CAMPOS COMUNES A TODOS LOS MODELOS (siempre visibles)
                # Usar valores de datos persistentes como valores por defecto
                datos_persistentes = st.session_state.datos_persistentes
                
                superficie = st.number_input(
                    "Superficie construida (m¬≤)", 
                    min_value=20.0, 
                    max_value=1000.0,
                    value=datos_persistentes.get('superficie', 80.0),
                    step=0.5,
                    help="Superficie total construida en metros cuadrados",
                    key="input_superficie"
                )
                
                dormitorios = st.number_input(
                    "N√∫mero de dormitorios",
                    min_value=1,
                    max_value=10,
                    value=datos_persistentes.get('dormitorios', 3),
                    help="N√∫mero total de dormitorios (variable ND)",
                    key="input_dormitorios"
                )
                
                banos = st.number_input(
                    "N√∫mero de ba√±os",
                    min_value=1,
                    max_value=6,
                    value=datos_persistentes.get('banos', 2),
                    help="N√∫mero total de ba√±os (variable NB)",
                    key="input_banos"
                )
                
                # CAMPOS ESPEC√çFICOS SEG√öN TIPO DE MODELO
                if es_modelo_valor:
                    # CAMPOS PARA MODELOS DE VALOR
                    vivienda_nueva = st.checkbox(
                        "Vivienda nueva (<5 a√±os)", 
                        value=datos_persistentes.get('vivienda_nueva', False),
                        help="Menos de 5 a√±os de antig√ºedad (variable Dnueva)",
                        key="input_vivienda_nueva"
                    )
                    
                    calefaccion = st.checkbox(
                        "Calefacci√≥n", 
                        value=datos_persistentes.get('calefaccion', True),
                        help="¬øTiene sistema de calefacci√≥n? (variable DCA)",
                        key="input_calefaccion"
                    )
                    
                    estado_conservacion_valor = st.select_slider(
                        "Estado de conservaci√≥n",
                        options=["Muy deficiente", "Deficiente", "Regular", "Buena", "Muy buena", "√ìptima"],
                        value=datos_persistentes.get('estado_conservacion', "Buena"),
                        help="Estado general de conservaci√≥n del inmueble",
                        key="input_estado_conservacion_valor"
                    )
                
                else:
                    # CAMPOS PARA MODELOS DE TASA/PRIMA
                    antiguedad = st.number_input(
                        "Antig√ºedad (a√±os)", 
                        min_value=0, 
                        max_value=200,
                        value=datos_persistentes.get('antiguedad', 15),
                        help="A√±os desde la construcci√≥n del inmueble (variable antig)",
                        key="input_antiguedad"
                    )
                    
                    rehabilitacion = st.checkbox(
                        "Rehabilitaci√≥n del edificio", 
                        value=datos_persistentes.get('rehabilitacion', False),
                        help="¬øEl edificio ha sido rehabilitado? (variable rehab)",
                        key="input_rehabilitacion"
                    )
                    
                    estado_conservacion = st.select_slider(
                        "Estado de conservaci√≥n",
                        options=["Muy deficiente", "Deficiente", "Regular", "Buena", "Muy buena", "√ìptima"],
                        value=datos_persistentes.get('estado_conservacion', "Buena"),
                        help="Estado general de conservaci√≥n del inmueble (variable EC_Alto)",
                        key="input_estado_conservacion_tasa"
                    )
            
            with col1_2:
                # CAMPOS COMUNES (continuaci√≥n)
                planta = st.number_input(
                    "Planta",
                    min_value=0,
                    max_value=20,
                    value=datos_persistentes.get('planta', 2),
                    help="Planta en la que se ubica el inmueble (variable PLbis)",
                    key="input_planta"
                )
                
                ascensor = st.checkbox(
                    "Ascensor", 
                    value=datos_persistentes.get('ascensor', True),
                    help="¬øEl edificio tiene ascensor? (variable DAS)",
                    key="input_ascensor"
                )
                        
                calidad_alta = st.checkbox(
                    "Calidad constructiva alta", 
                    value=datos_persistentes.get('calidad_alta', False),
                    help="Calidad de materiales y acabados alta (variable CC_Alta)",
                    key="input_calidad_alta"
                )

                # Bot√≥n para actualizar datos persistentes
                if st.button("üíæ Guardar valores actuales", use_container_width=True):
                    # Actualizar datos persistentes con los valores actuales
                    datos_actualizados = {
                        'superficie': superficie,
                        'dormitorios': dormitorios,
                        'banos': banos,
                        'planta': planta,
                        'ascensor': ascensor,
                        'calidad_alta': calidad_alta,
                        'codigo_municipio': codigo_municipio,
                        'modelo_seleccionado': modelo_seleccionado
                    }
                    
                    # Agregar campos espec√≠ficos seg√∫n el tipo de modelo
                    if es_modelo_valor:
                        datos_actualizados.update({
                            'vivienda_nueva': vivienda_nueva,
                            'calefaccion': calefaccion,
                            'estado_conservacion': estado_conservacion_valor
                        })
                    else:
                        datos_actualizados.update({
                            'antiguedad': antiguedad,
                            'rehabilitacion': rehabilitacion,
                            'estado_conservacion': estado_conservacion
                        })
                    
                    st.session_state.datos_persistentes.update(datos_actualizados)
                    st.success("‚úÖ Valores guardados para uso entre modelos")
                    
                    # Forzar rerun para aplicar cambios inmediatamente
                    st.rerun()
    
    with col2:
        with st.container():
            st.subheader("üéØ Calcular Tasaci√≥n")
            
            # Mostrar informaci√≥n del modelo seleccionado
            if es_modelo_prima:
                st.info("üõ°Ô∏è **Modelo de Prima de Riesgo activado**")
                st.write("Calcula √∫nicamente la prima de riesgo")
            elif es_modelo_tasa:
                st.info("üìà **Modelo de Tasa Descuento activado**")
                st.write("Calcula √∫nicamente la tasa de descuento")
            else:
                st.info("üí∞ **Modelo de Valor activado**")
                st.write("Calcula √∫nicamente el valor por m¬≤")
            
            # Texto del bot√≥n seg√∫n el tipo de modelo
            texto_boton = ""
            if es_modelo_prima:
                texto_boton = "üõ°Ô∏è Calcular Prima de Riesgo"
            elif es_modelo_tasa:
                texto_boton = "üìà Calcular Tasa Descuento"
            else:
                texto_boton = "üí∞ Calcular Valor"
            
            if st.button(texto_boton, type="primary", use_container_width=True):
                with st.spinner("Calculando tasaci√≥n usando modelos econom√©tricos..."):
                    # Obtener el modelo seleccionado directamente
                    modelo_valor = st.session_state.modelo.obtener_modelo(modelo_seleccionado)
                    
                    if not modelo_valor:
                        st.error("‚ùå No se pudo cargar el modelo seleccionado")
                        return
                    
                    # Preparar datos seg√∫n el tipo de modelo
                    if es_tasa_prima:
                        datos_inmueble = {
                            'superficie': superficie,
                            'antiguedad': antiguedad,
                            'dormitorios': dormitorios,
                            'banos': banos,
                            'planta': planta,
                            'ascensor': ascensor,
                            'rehabilitacion': rehabilitacion,
                            'calidad_alta': calidad_alta,
                            'estado_alto': estado_conservacion in ["Buena", "Muy buena", "√ìptima"]
                        }
                    else:
                        datos_inmueble = {
                            'superficie': superficie,
                            'dormitorios': dormitorios,
                            'banos': banos,
                            'planta': planta,
                            'calefaccion': calefaccion,
                            'ascensor': ascensor,
                            'vivienda_nueva': vivienda_nueva,
                            'calidad_alta': calidad_alta,
                            'estado_alto': estado_conservacion_valor in ["Buena", "Muy buena", "√ìptima"]
                        }
                    
                    # CALCULAR S√ìLO LO QUE CORRESPONDA AL MODELO SELECCIONADO
                    resultados = {}
                    
                    if es_modelo_valor:
                        # Solo calcular valor para modelos de valor
                        valor_m2, contrib_valor = st.session_state.modelo.calcular_valor_m2(
                            datos_inmueble, modelo_valor, codigo_municipio
                        )
                        valor_total = valor_m2 * superficie
                        resultados.update({
                            'valor_m2': valor_m2,
                            'valor_total': valor_total,
                            'contrib_valor': contrib_valor
                        })
                    
                    elif es_modelo_tasa:
                        # Solo calcular tasa para modelo de tasa 
                        tasa_descuento, contrib_tasa = st.session_state.modelo.calcular_tasa_descuento(
                            datos_inmueble, codigo_municipio
                        )
                        resultados.update({
                            'tasa_descuento': tasa_descuento,
                            'contrib_tasa': contrib_tasa
                        })

                    elif es_modelo_prima:
                        # Solo calcular prima para modelo de prima 
                        prima_riesgo, contrib_prima = st.session_state.modelo.calcular_prima_riesgo(
                            datos_inmueble, codigo_municipio
                        )
                        resultados.update({
                            'prima_riesgo': prima_riesgo,
                            'contrib_prima': contrib_prima
                        })
                    
                    # Mostrar resultados
                    st.success("‚úÖ Tasaci√≥n calculada correctamente")
                    
                    # M√©tricas principales (solo lo que se calcul√≥)
                    if es_modelo_prima:
                        col_res1, col_res2 = st.columns(2)
                        with col_res1:
                            st.metric("Prima de Riesgo", f"{resultados['prima_riesgo']:.2%}")
                        with col_res2:
                            st.metric("Tipo de Modelo", "Prima Riesgo")
                    
                    elif es_modelo_tasa:
                        col_res1, col_res2 = st.columns(2)
                        with col_res1:
                            st.metric("Tasa Descuento", f"{resultados['tasa_descuento']:.2%}")
                        with col_res2:
                            st.metric("Tipo de Modelo", "Tasa Descuento")
                    
                    else:
                        col_res1, col_res2, col_res3 = st.columns(3)
                        with col_res1:
                            st.metric("Valor por m¬≤", f"‚Ç¨ {resultados['valor_m2']:,.0f}")
                        with col_res2:
                            st.metric("Valor Total", f"‚Ç¨ {resultados['valor_total']:,.0f}")
                        with col_res3:
                            st.metric("Tipo de Modelo", "Valor")
                    
                    # Informaci√≥n del modelo usado
                    st.info(f"**Modelo aplicado:** {modelo_valor['nombre_modelo']}")
                    
                    # Contribuciones detalladas (solo las relevantes)
                    with st.expander("üìä An√°lisis Detallado de Contribuciones", expanded=True):
                        if es_modelo_prima:
                            st.subheader("üõ°Ô∏è Contribuci√≥n a la Prima")
                            contrib_df_prima = pd.DataFrame({
                                'Variable': list(resultados['contrib_prima'].keys()),
                                'Impacto en Prima': [f"{v:+.1f}%" for v in resultados['contrib_prima'].values()],  
                                'Efecto': ['üìà Aumenta' if v > 0 else 'üìâ Reduce' for v in resultados['contrib_prima'].values()]
                            })
                            st.dataframe(contrib_df_prima, use_container_width=True, height=200, hide_index=True)
                        
                        elif es_modelo_tasa:
                            st.subheader("üìà Contribuci√≥n a la Tasa")
                            contrib_df_tasa = pd.DataFrame({
                                'Variable': list(resultados['contrib_tasa'].keys()),
                                'Impacto en Tasa': [f"{v:+.1f}%" for v in resultados['contrib_tasa'].values()],
                                'Efecto': ['üìà Aumenta' if v > 0 else 'üìâ Reduce' for v in resultados['contrib_tasa'].values()]
                            })
                            st.dataframe(contrib_df_tasa, use_container_width=True, height=200, hide_index=True)
                        
                        else:
                            st.subheader("üí∞ Contribuci√≥n al Valor por m¬≤")
                            contrib_df_valor = pd.DataFrame({
                                'Variable': list(resultados['contrib_valor'].keys()),
                                'Impacto en Valor': [f"{v:+.1f}%" for v in resultados['contrib_valor'].values()],
                                'Efecto': ['üìà Aumenta' if v > 0 else 'üìâ Reduce' for v in resultados['contrib_valor'].values()]
                            })
                            st.dataframe(contrib_df_valor, use_container_width=True, height=200, hide_index=True)
                    
                    # Preparar resultado para descarga
                    resultado_descarga = {
                        'fecha_calculo': datetime.now().isoformat(),
                        'codigo_municipio': codigo_municipio,
                        'superficie': superficie,
                        'modelo_usado': modelo_valor['nombre_modelo'],
                    }
                    
                    # Agregar solo los resultados calculados
                    if es_modelo_valor:
                        resultado_descarga.update({
                            'valor_m2': resultados['valor_m2'],
                            'valor_total': resultados['valor_total'],
                            'contribuciones_valor': resultados['contrib_valor']
                        })
                    elif es_modelo_tasa:
                        resultado_descarga.update({
                            'tasa_descuento': resultados['tasa_descuento'],
                            'contribuciones_tasa': resultados['contrib_tasa']
                        })
                    elif es_modelo_prima:
                        resultado_descarga.update({
                            'prima_riesgo': resultados['prima_riesgo'],
                            'contribuciones_prima': resultados['contrib_prima']
                        })

                    st.download_button(
                        "üì• Descargar Informe JSON",
                        data=json.dumps(resultado_descarga, indent=2),
                        file_name=f"tasacion_{codigo_municipio}_{datetime.now().strftime('%Y%m%d_%H%M')}.json",
                        mime="application/json",
                        use_container_width=True
                    )
            else:
                st.info("‚ÑπÔ∏è Complete los datos y haga clic en el bot√≥n para obtener resultados")

def validar_fila_para_modelo(fila: pd.Series, modelo_clave: str) -> Tuple[bool, List[str]]:
    """Valida que una fila tenga las columnas requeridas para el modelo especificado"""
    errores = []
    
    # Columnas requeridas para todos los modelos
    columnas_requeridas_base = ['codigo_municipio', 'superficie', 'dormitorios', 'banos', 'planta']
    
    # Columnas espec√≠ficas por tipo de modelo
    if es_modelo_tasa_o_prima(modelo_clave):
        # Modelos de tasa/prima requieren antiguedad
        columnas_requeridas = columnas_requeridas_base + ['antiguedad']
    else:
        # Modelos de valor requieren calefaccion, vivienda_nueva
        columnas_requeridas = columnas_requeridas_base + ['calefaccion', 'vivienda_nueva']
    
    # Verificar columnas requeridas
    for columna in columnas_requeridas:
        if columna not in fila.index:
            errores.append(f"Falta columna requerida: {columna}")
        elif pd.isna(fila[columna]):
            errores.append(f"Valor faltante en columna: {columna}")
    
    # Validar tipos de datos b√°sicos
    if 'superficie' in fila and not pd.isna(fila['superficie']):
        try:
            float(fila['superficie'])
        except (ValueError, TypeError):
            errores.append("Superficie debe ser num√©rica")
    
    if 'codigo_municipio' in fila and not pd.isna(fila['codigo_municipio']):
        try:
            str(fila['codigo_municipio'])
        except (ValueError, TypeError):
            errores.append("C√≥digo municipio debe ser texto o n√∫mero")
    
    return len(errores) == 0, errores

def procesar_fila_multiple(fila: pd.Series, modelo_tasacion, modelos_json: Dict) -> Tuple[bool, Dict, str]:
    """Procesa una fila individual del Excel y retorna resultado o error"""
    try:
        # Validar que la fila tenga modelo
        if 'modelo' not in fila or pd.isna(fila['modelo']):
            return False, {}, "Falta especificar el modelo"
        
        modelo_clave = str(fila['modelo'])
        
        # Validar fila para el modelo espec√≠fico
        es_valida, errores_validacion = validar_fila_para_modelo(fila, modelo_clave)
        if not es_valida:
            return False, {}, f"Errores validaci√≥n: {', '.join(errores_validacion)}"
        
        # Obtener modelo
        modelo_obj = modelos_json.get(modelo_clave)
        if not modelo_obj:
            return False, {}, f"Modelo '{modelo_clave}' no encontrado"
        
        # Preparar datos seg√∫n tipo de modelo
        codigo_municipio = str(fila['codigo_municipio'])
        superficie = float(fila['superficie'])
        
        if es_modelo_tasa_o_prima(modelo_clave):
            # Modelo de tasa o prima
            datos = {
                'superficie': superficie,
                'antiguedad': float(fila.get('antiguedad', 0)),
                'dormitorios': int(fila.get('dormitorios', 0)),
                'banos': int(fila.get('banos', 0)),
                'planta': int(fila.get('planta', 0)),
                'ascensor': bool(fila.get('ascensor', False)),
                'rehabilitacion': bool(fila.get('rehabilitacion', False)),
                'calidad_alta': bool(fila.get('calidad_alta', False)),
                'estado_alto': fila.get('estado_conservacion', '') in ["Buena", "Muy buena", "√ìptima"],
                'vivienda_nueva': bool(fila.get('vivienda_nueva', False))
            }
            
            if modelo_clave == 'testigos_tasa':
                resultado, contribuciones = modelo_tasacion.calcular_tasa_descuento(datos, codigo_municipio)
                return True, {
                    'tipo': 'tasa',
                    'valor': resultado,
                    'contribuciones': contribuciones,
                    'modelo': modelo_obj['nombre_modelo'],
                    'codigo_municipio': codigo_municipio,
                    'superficie': superficie
                }, ""
            else: # testigos_prima
                resultado, contribuciones = modelo_tasacion.calcular_prima_riesgo(datos, codigo_municipio)
                return True, {
                    'tipo': 'prima',
                    'valor': resultado,
                    'contribuciones': contribuciones,
                    'modelo': modelo_obj['nombre_modelo'],
                    'codigo_municipio': codigo_municipio,
                    'superficie': superficie
                }, ""
        else:
            # Modelo de valor (ya estaba correcto)
            datos = {
                'superficie': superficie,
                'dormitorios': int(fila.get('dormitorios', 0)),
                'banos': int(fila.get('banos', 0)),
                'planta': int(fila.get('planta', 0)),
                'calefaccion': bool(fila.get('calefaccion', False)),
                'ascensor': bool(fila.get('ascensor', False)),
                'vivienda_nueva': bool(fila.get('vivienda_nueva', False)),
                'calidad_alta': bool(fila.get('calidad_alta', False)),
                'estado_alto': fila.get('estado_conservacion', '') in ["Buena", "Muy buena", "√ìptima"]
            }
            
            valor_m2, contribuciones = modelo_tasacion.calcular_valor_m2(datos, modelo_obj, codigo_municipio)
            valor_total = valor_m2 * superficie
            
            return True, {
                'tipo': 'valor',
                'valor_m2': valor_m2,
                'valor_total': valor_total,
                'contribuciones': contribuciones,
                'modelo': modelo_obj['nombre_modelo'],
                'codigo_municipio': codigo_municipio,
                'superficie': superficie
            }, ""
            
    except Exception as e:
        return False, {}, f"Error en procesamiento: {str(e)}"

def crear_plantilla_fallback():
    # Datos de ejemplo m√≠nimos
    sample_data = {
        'modelo': ['testigos_menos_10000', 'testigos_tasa'],
        'codigo_municipio': ['2005', '2006'],
        'superficie': [85.5, 120.0],
        'dormitorios': [3, 4],
        'banos': [2, 3],
        'planta': [2, 3],
        'calefaccion': [True, ''],
        'ascensor': [True, False],
        'vivienda_nueva': [False, ''],
        'antiguedad': ['', 15],
        'rehabilitacion': ['', True],
        'calidad_alta': [False, False],
        'estado_conservacion': ['Buena', 'Buena']
    }
    
    df_fallback = pd.DataFrame(sample_data)
    
    # Crear Excel en memoria
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df_fallback.to_excel(writer, index=False, sheet_name='Plantilla')
    
    excel_data = output.getvalue()
    
    st.download_button(
        "üì• Descargar plantilla b√°sica",
        data=excel_data,
        file_name="plantilla_tasacion_basica.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        use_container_width=True
    )
    
def pagina_tasacion_multiple():
    """Pesta√±a para tasaci√≥n m√∫ltiple con validaci√≥n avanzada por modelo"""
    st.header("üìÅ Tasaci√≥n M√∫ltiple por Lotes")
    
    with st.expander("‚ÑπÔ∏è Informaci√≥n sobre tasaci√≥n m√∫ltiple", expanded=True):
        st.markdown("""
        **Caracter√≠sticas de la tasaci√≥n por lotes:**
        - Procesamiento simult√°neo de m√∫ltiples inmuebles usando modelos econom√©tricos
        - Validaci√≥n autom√°tica por tipo de modelo especificado en cada fila
        - Detecci√≥n y reporte de errores por fila con mensajes espec√≠ficos
        - Generaci√≥n de informe consolidado con an√°lisis de contribuciones
        - L√≠mite: 500 registros por lote
        
        **Columnas comunes requeridas en el Excel:**
        - `modelo`: Tipo de modelo (testigos_menos_10000, testigos_tasa, testigos_prima, etc.)
        - `codigo_municipio`: C√≥digo del municipio (ej: 2005, 2006, etc.)
        - `superficie`: Superficie en m¬≤ (n√∫mero)
        
        **Columnas requeridas seg√∫n tipo de modelo:**
        
        **Para modelos de VALOR (testigos_menos_10000, testigos_10000_50000, etc.):**
        - `dormitorios`, `banos`, `planta`, `calefaccion`, `ascensor`, `vivienda_nueva`, `calidad_alta`, `estado_conservacion`
        
        **Para modelos de TASA/PRIMA (testigos_tasa, testigos_prima):**
        - `dormitorios`, `banos`, `planta`, `ascensor`, `antiguedad`, `rehabilitacion`, `calidad_alta`, `estado_conservacion`
        """)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        uploaded_file = st.file_uploader(
            "üì§ Subir archivo Excel para tasaci√≥n m√∫ltiple", 
            type=['xlsx', 'xls'],
            help="El archivo debe contener las columnas requeridas seg√∫n el tipo de modelo especificado en cada fila"
        )
        
        if uploaded_file is not None:
            try:
                df = pd.read_excel(uploaded_file)
                
                # Validar que existe columna modelo
                if 'modelo' not in df.columns:
                    st.error("‚ùå El archivo debe contener la columna 'modelo' que especifique el tipo de modelo para cada fila")
                    return
                
                print(f"‚úÖ Archivo cargado correctamente - {len(df)} registros detectados")
                
                # Estad√≠sticas
                col_stats1, col_stats2, col_stats3 = st.columns(3)
                with col_stats1:
                    st.metric("Registros", len(df))
                with col_stats2:
                    modelos_unicos = df['modelo'].unique() if 'modelo' in df.columns else []
                    st.metric("Tipos de modelo", len(modelos_unicos))
                with col_stats3:
                    st.metric("Municipios", df['codigo_municipio'].nunique() if 'codigo_municipio' in df.columns else 0)
                
                # Vista previa
                st.subheader("üëÅÔ∏è Vista previa de datos")
                st.dataframe(df.head(10), use_container_width=True, height=300)
                
                # Procesar lote
                if st.button("üöÄ Procesar Lote Completo", type="primary", use_container_width=True):
                    with st.spinner(f"Procesando {len(df)} registros con modelos econom√©tricos..."):
                        resultados_exitosos = []
                        resultados_detallados = []
                        errores_detallados = []
                        
                        for idx, fila in df.iterrows():
                            numero_fila = idx + 2  # +2 porque Excel empieza en 1 y tiene headers
                            
                            # Procesar fila individual
                            es_exitosa, resultado, mensaje_error = procesar_fila_multiple(
                                fila, st.session_state.modelo, st.session_state.modelos_json
                            )
                            
                            if es_exitosa:
                                resultados_exitosos.append(resultado)
                                resultados_detallados.append({
                                    'fila': numero_fila,
                                    'estado': '‚úÖ √âXITO',
                                    'modelo': resultado['modelo'],
                                    'codigo_municipio': resultado['codigo_municipio'],
                                    'superficie': resultado['superficie'],
                                    'resultado': format_resultado_multiple(resultado),
                                    'detalles': obtener_detalles_contribuciones(resultado)
                                })
                            else:
                                errores_detallados.append({
                                    'fila': numero_fila,
                                    'estado': '‚ùå ERROR',
                                    'modelo': str(fila.get('modelo', 'No especificado')),
                                    'codigo_municipio': str(fila.get('codigo_municipio', 'N/A')),
                                    'error': mensaje_error
                                })
                        
                        # MOSTRAR RESULTADOS DEL PROCESAMIENTO
                        st.subheader("üìä Resultados del Procesamiento")
                        
                        col_res1, col_res2, col_res3 = st.columns(3)
                        with col_res1:
                            st.metric("Procesadas correctamente", len(resultados_exitosos))
                        with col_res2:
                            st.metric("Errores", len(errores_detallados))
                        with col_res3:
                            tasa_exito = (len(resultados_exitosos) / len(df)) * 100 if len(df) > 0 else 0
                            st.metric("Tasa de √©xito", f"{tasa_exito:.1f}%")
                        
                        # Pesta√±as para resultados detallados
                        tab_resultados, tab_errores, tab_consolidado = st.tabs([
                            f"‚úÖ Resultados ({len(resultados_exitosos)})",
                            f"‚ùå Errores ({len(errores_detallados)})", 
                            "üìã Consolidado"
                        ])
                        
                        with tab_resultados:
                            if resultados_detallados:
                                df_resultados = pd.DataFrame(resultados_detallados)
                                st.dataframe(df_resultados, use_container_width=True)
                            else:
                                st.info("No hay resultados exitosos para mostrar")
                        
                        with tab_errores:
                            if errores_detallados:
                                df_errores = pd.DataFrame(errores_detallados)
                                st.dataframe(df_errores, use_container_width=True)
                                
                                # Mostrar an√°lisis de errores
                                st.subheader("üìà An√°lisis de Errores")
                                errores_por_tipo = df_errores['error'].value_counts()
                                st.bar_chart(errores_por_tipo)
                            else:
                                st.success("üéâ No se encontraron errores en el procesamiento")
                        
                        with tab_consolidado:
                            st.markdown("""
                                **üìä Estructura del Excel generado:**
                                
                                - **Columnas b√°sicas**: Modelo, c√≥digo municipio, superficie
                                - **Resultados**: Valor m¬≤, valor total, tasa descuento o prima riesgo (seg√∫n modelo)
                                - **Factores influyentes**: Los 2 factores que m√°s impactan en el resultado con su porcentaje
                                
                                *Cada fila representa una tasaci√≥n procesada correctamente*
                                """)
                            if resultados_exitosos:
                                # Crear DataFrame consolidado para descarga MEJORADO
                                datos_consolidados = []
                                for resultado in resultados_exitosos:
                                    fila_consolidada = {
                                        'modelo': resultado['modelo'],
                                        'codigo_municipio': resultado['codigo_municipio'],
                                        'superficie': resultado['superficie']
                                    }
                                    
                                    # Resultados espec√≠ficos por tipo
                                    if resultado['tipo'] == 'valor':
                                        fila_consolidada.update({
                                            'valor_m2': round(resultado['valor_m2'], 2),
                                            'valor_total': round(resultado['valor_total'], 2),
                                            'tasa_descuento': '',
                                            'prima_riesgo': ''
                                        })
                                    elif resultado['tipo'] == 'tasa':
                                        fila_consolidada.update({
                                            'valor_m2': '',
                                            'valor_total': '',
                                            'tasa_descuento': round(resultado['valor'], 4),
                                            'prima_riesgo': ''
                                        })
                                    elif resultado['tipo'] == 'prima':
                                        fila_consolidada.update({
                                            'valor_m2': '',
                                            'valor_total': '',
                                            'tasa_descuento': '',
                                            'prima_riesgo': round(resultado['valor'], 4)
                                        })
                                    
                                    # Agregar factores m√°s influyentes como columnas separadas
                                    factores = obtener_factores_influyentes_detallados(resultado['contribuciones'])
                                    fila_consolidada.update(factores)
                                    
                                    datos_consolidados.append(fila_consolidada)
                                
                                df_consolidado = pd.DataFrame(datos_consolidados)
                                
                                # Reordenar columnas para mejor presentaci√≥n
                                column_order = ['modelo', 'codigo_municipio', 'superficie', 'valor_m2', 'valor_total', 
                                            'tasa_descuento', 'prima_riesgo', 'factor_1', 'impacto_1', 'factor_2', 'impacto_2']
                                # Solo incluir columnas que existan en el DataFrame
                                column_order = [col for col in column_order if col in df_consolidado.columns]
                                df_consolidado = df_consolidado[column_order]
                                
                                st.dataframe(df_consolidado, use_container_width=True)
                                
                                # Descargar como Excel
                                output = io.BytesIO()
                                with pd.ExcelWriter(output, engine='openpyxl') as writer:
                                    df_consolidado.to_excel(writer, index=False, sheet_name='Resultados_Tasacion')
                                
                                excel_data = output.getvalue()
                                st.download_button(
                                    "üìä Descargar Excel con Resultados",
                                    data=excel_data,
                                    file_name=f"resultados_tasacion_consolidado_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx",
                                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                    use_container_width=True
                                )
                            else:
                                st.info("No hay datos consolidados para mostrar")

            except Exception as e:
                st.error(f"‚ùå Error procesando el archivo: {str(e)}")
    
    with col2:
        st.subheader("üìã Plantilla de Ejemplo")
        
        # Cargar plantilla existente desde assets
        plantilla_path = "assets/plantilla_tasacion_basica.xlsx"
        
        # Buscar la plantilla en diferentes ubicaciones posibles
        posibles_rutas = [
            plantilla_path,
            f"/app/{plantilla_path}",
            f"/app/assets/plantilla_tasacion_basica.xlsx",
            "./assets/plantilla_tasacion_basica.xlsx",
            "plantilla_tasacion_basica.xlsx"
        ]
        
        plantilla_encontrada = None
        for ruta in posibles_rutas:
            if os.path.exists(ruta):
                plantilla_encontrada = ruta
                break
        
        if plantilla_encontrada:
            try:
                # Leer el archivo Excel existente
                with open(plantilla_encontrada, "rb") as file:
                    excel_data = file.read()
                
                # Bot√≥n para descargar plantilla
                st.download_button(
                    "üì• Descargar plantilla b√°sica",
                    data=excel_data,
                    file_name="plantilla_tasacion_basica.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    help="Descargue la plantilla b√°sica con el formato requerido",
                    use_container_width=True
                )
                
                # Mostrar vista previa de la plantilla
                with st.expander("üëÄ Ver estructura de la plantilla"):
                    try:
                        df_plantilla = pd.read_excel(plantilla_encontrada)
                        st.dataframe(df_plantilla.head(5), use_container_width=True)
                        st.caption(f"Plantilla con {len(df_plantilla)} filas de ejemplo y {len(df_plantilla.columns)} columnas")
                    except Exception as e:
                        st.warning(f"No se pudo mostrar vista previa: {e}")
                        
            except Exception as e:
                st.error(f"‚ùå Error cargando plantilla: {e}")
                # Fallback: crear plantilla b√°sica
                st.warning("Usando plantilla b√°sica de respaldo...")
                crear_plantilla_fallback()
        else:
            st.error("‚ùå No se encontr√≥ la plantilla en assets/")
            st.info("Creando plantilla de respaldo...")
            crear_plantilla_fallback()

        st.markdown("---")
        st.markdown("### üí° Consejos para el formato")
        st.write("‚Ä¢ **Columna 'modelo'**: Debe coincidir exactamente con los nombres de modelo")
        st.write("‚Ä¢ **Validaci√≥n autom√°tica**: Cada fila se valida seg√∫n su tipo de modelo")
        st.write("‚Ä¢ **Formato Excel**: Use el formato .xlsx para mejor compatibilidad")
        st.write("‚Ä¢ **Codificaci√≥n**: UTF-8 para caracteres especiales")

def obtener_factores_influyentes_detallados(contribuciones: Dict) -> Dict:
    """Obtiene los factores m√°s influyentes como columnas separadas"""
    factores_dict = {}
    
    if contribuciones:
        # Excluir el valor base y ordenar por valor absoluto
        contribs_filtradas = {k: v for k, v in contribuciones.items() 
                             if 'base' not in k.lower() and 'municipio' not in k.lower()}
        
        if contribs_filtradas:
            # Ordenar por impacto absoluto y tomar top 2
            top_factores = sorted(contribs_filtradas.items(), 
                                key=lambda x: abs(x[1]), reverse=True)[:2]
            
            # Asignar a columnas separadas
            for i, (factor, impacto) in enumerate(top_factores, 1):
                # Limpiar nombre del factor
                nombre_limpio = factor.replace('contrib_', '').replace('_', ' ').title()
                factores_dict[f'factor_{i}'] = nombre_limpio
                factores_dict[f'impacto_{i}'] = f"{impacto:+.1f}%"
        
        # Rellenar con vac√≠os si hay menos de 2 factores
        for i in range(len(top_factores) + 1, 3):
            factores_dict[f'factor_{i}'] = ''
            factores_dict[f'impacto_{i}'] = ''
    
    return factores_dict

# Funciones auxiliares para el procesamiento m√∫ltiple
def format_resultado_multiple(resultado: Dict) -> str:
    """Formatea el resultado para mostrar en tabla"""
    if resultado['tipo'] == 'valor':
        return f"‚Ç¨{resultado['valor_m2']:,.0f}/m¬≤ (Total: ‚Ç¨{resultado['valor_total']:,.0f})"
    elif resultado['tipo'] == 'tasa':
        return f"{resultado['valor']:.2%}"
    elif resultado['tipo'] == 'prima':
        return f"{resultado['valor']:.2%}"
    return "N/A"

def obtener_detalles_contribuciones(resultado: Dict) -> str:
    """Obtiene los detalles de contribuciones para mostrar"""
    if 'contribuciones' in resultado:
        contribs = resultado['contribuciones']
        top_3 = sorted(contribs.items(), key=lambda x: abs(x[1]), reverse=True)[:3]
        return ", ".join([f"{k}: {v:+.1f}%" for k, v in top_3])
    return "Sin detalles"

def obtener_factores_influyentes(contribuciones: Dict) -> str:
    """Obtiene los factores m√°s influyentes para el resultado consolidado"""
    if contribuciones:
        # Excluir el valor base y ordenar por valor absoluto
        contribs_filtradas = {k: v for k, v in contribuciones.items() if 'base' not in k.lower()}
        if contribs_filtradas:
            top_2 = sorted(contribs_filtradas.items(), key=lambda x: abs(x[1]), reverse=True)[:2]
            return " + ".join([k for k, v in top_2])
    return "Municipio"

def pagina_documentacion():
    """Pesta√±a de documentaci√≥n t√©cnica mejorada usando configuraci√≥n YAML"""
    if not st.session_state.config_sistema:
        st.error("No se pudo cargar la configuraci√≥n del sistema")
        return
        
    config = st.session_state.config_sistema
    doc_config = config.get('documentacion', {})
    
    st.header("üìö Documentaci√≥n T√©cnica - Modelos ECO 805")
    
    # Introducci√≥n desde YAML
    introduccion = doc_config.get('introduccion', 'Sistema de valoraci√≥n basado en an√°lisis de regresi√≥n m√∫ltiple.')
    st.markdown(f"""
    <div style='background: #f0f2f6; padding: 2rem; border-radius: 10px; border-left: 4px solid #1f77b4;'>
        <h4 style='color: #1f77b4; margin-top: 0;'>Modelos Econom√©tricos para Tasaci√≥n Inmobiliaria</h4>
        <p style='margin-bottom: 0;'>{introduccion}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Metodolog√≠a desde YAML
    st.subheader("üî¨ Metodolog√≠a Cient√≠fica")
    
    col_metodo1, col_metodo2 = st.columns(2)
    
    with col_metodo1:
        st.markdown("**Base de Datos:**")
        for item in doc_config.get('metodologia', {}).get('base_datos', []):
            st.write(f"- {item}")
        
        st.markdown("**Procesamiento:**")
        for item in doc_config.get('metodologia', {}).get('procesamiento', []):
            st.write(f"- {item}")
    
    with col_metodo2:
        st.markdown("**Validaci√≥n Estad√≠stica:**")
        for item in doc_config.get('metodologia', {}).get('validacion', []):
            st.write(f"- {item}")
        
        st.markdown("**Software Utilizado:**")
        for item in doc_config.get('metodologia', {}).get('software', []):
            st.write(f"- {item}")
    
    # Modelos matem√°ticos
    st.subheader("üßÆ Modelos Matem√°ticos Implementados")
    
    tab_model1, tab_model2, tab_model3 = st.tabs(["Valor por m¬≤", "Tasa Descuento", "Prima Riesgo"])
    
    with tab_model1:
        st.markdown("""
        ### Modelo de Valor por Metro Cuadrado
        
        $$VM_{i} = \\beta_0 + \\sum_{j=1}^{J}\\beta_j X_{ji} + \\epsilon_i$$
        
        **Donde:**
        - $VM_{i}$: Valor por m¬≤ del inmueble i
        - $\\beta_0$: T√©rmino independiente (valor base municipal)
        - $\\beta_j$: Coeficientes de las variables explicativas
        - $X_{ji}$: Variables intr√≠nsecas del inmueble
        - $\\epsilon_i$: T√©rmino de error
        
        **Variables Significativas:**
        - Superficie (efecto variable seg√∫n municipio)
        - Antig√ºedad (depreciaci√≥n)
        - N√∫mero de ba√±os (positivo)
        - N√∫mero de dormitorios (negativo en municipios grandes)
        - Calefacci√≥n, ascensor, calidad constructiva
        """)
    
    with tab_model2:
        st.markdown("""
        ### Modelo de Tasa de Descuento
        
        $$Tasa_i = \\beta_0 + \\sum_{j=1}^{J}\\beta_j X_{ji} + \\epsilon_i$$
        
        **Componentes:**
        - Tasa libre de riesgo (bonos estado 5 a√±os)
        - Prima de riesgo espec√≠fica del inmueble
        
        **Variables Significativas:**
        - Superficie: efecto positivo marginal
        - Antig√ºedad: efecto positivo (mayor riesgo)
        - Ba√±os: efecto negativo (reduce riesgo)
        - Ascensor: efecto negativo (reduce riesgo)
        - Estado conservaci√≥n alto: efecto negativo
        """)
        
        st.latex(r"""
        \text{Tasa Descuento} = \text{Tasa Libre Riesgo} + \text{Prima Riesgo}
        """)
    
    with tab_model3:
        st.markdown("""
        ### Modelo de Prima de Riesgo
        
        $$Prima_i = \\beta_0 + \\sum_{j=1}^{J}\\beta_j X_{ji} + \\epsilon_i$$
        
        **Factores de Riesgo Considerados:**
        - Riesgo de ubicaci√≥n (municipio)
        - Riesgo por antig√ºedad y estado
        - Riesgo por caracter√≠sticas constructivas
        - Riesgo de mercado local
        
        **Hallazgos Clave:**
        - Municipios peque√±os: mayor prima por iliquidez
        - Antig√ºedad: aumenta prima consistentemente
        - Ascensor y buen estado: reducen prima
        - Calidad constructiva: efecto variable
        """)
    
    # Segmentaci√≥n por poblaci√≥n - CORRECCI√ìN: Leer R¬≤ desde modelos_disponibles
    st.subheader("üèôÔ∏è Segmentaci√≥n por Tama√±o Municipal")
    
    col_seg1, col_seg2, col_seg3, col_seg4 = st.columns(4)
    
    # Obtener modelos disponibles desde la configuraci√≥n
    modelos_config = config.get('modelos_disponibles', [])
    
    # Buscar los R¬≤ espec√≠ficos para cada modelo de valor
    r2_menos_10000 = next((modelo.get('r2', '76.32%') for modelo in modelos_config if modelo.get('clave') == 'testigos_menos_10000'), '76.32%')
    r2_10000_50000 = next((modelo.get('r2', '73.89%') for modelo in modelos_config if modelo.get('clave') == 'testigos_10000_50000'), '73.89%')
    r2_50000_200000 = next((modelo.get('r2', '67.18%') for modelo in modelos_config if modelo.get('clave') == 'testigos_50000_200000'), '67.18%')
    r2_mas_200000 = next((modelo.get('r2', '61.95%') for modelo in modelos_config if modelo.get('clave') == 'testigos_mas_200000'), '61.95%')

    with col_seg1:
        st.metric("< 10,000 hab", f"R¬≤ = {r2_menos_10000}", "Mayor poder explicativo")
    with col_seg2:
        st.metric("10,000-50,000", f"R¬≤ = {r2_10000_50000}", "Alta significatividad")
    with col_seg3:
        st.metric("50,000-200,000", f"R¬≤ = {r2_50000_200000}", "Modelo robusto")
    with col_seg4:
        st.metric("> 200,000 hab", f"R¬≤ = {r2_mas_200000}", "M√°xima complejidad")

    st.markdown("""
    **Hallazgos clave de los modelos econom√©tricos:**
    - **R¬≤ decreciente con tama√±o municipal**: Mayor poder explicativo en municipios peque√±os (76.32%) vs grandes (61.95%)
    - **Efecto superficie (SU)**: Negativo en municipios <200k hab, positivo en grandes ciudades
    - **Dormitorios (ND)**: Efecto negativo consistente en todos los modelos
    - **Variables positivas**: Ba√±os (NB), ascensor (DAS), calidad alta (CC_Alta) y calefacci√≥n (DCA) siempre positivas
    - **Planta (PLbis)**: Efecto positivo que se intensifica con el tama√±o municipal
    """)

def mostrar_footer():
    """Footer usando configuraci√≥n YAML"""
    if not st.session_state.config_sistema:
        sistema_info = {'nombre': 'AESVAL - CTIC', 'version': 'v2.0'}
    else:
        sistema_info = st.session_state.config_sistema.get('sistema', {})
    
    st.markdown("---")
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown(
            f"""
            <div style='text-align: center; color: #666; padding:0;'>
                <p style='margin-bottom: 0; font-size: 0.9rem;'>
                    ¬© {sistema_info.get('a√±o', current_year)} <strong>{sistema_info.get('desarrollador', 'AESVAL - CTIC')}</strong> | 
                    {sistema_info.get('nombre', 'Sistema de Tasaci√≥n Autom√°tico')} {sistema_info.get('version', 'v2.0')}
                </p>
                <p style='margin-bottom: 0; font-size: 0.8rem;'>
                    Desarrollado con Streamlit ‚Ä¢ Modelos Econom√©tricos STATA ‚Ä¢ 
                    <a href='#' style='color: #666;'>Pol√≠tica de privacidad</a> ‚Ä¢ 
                    <a href='#' style='color: #666;'>T√©rminos de uso</a>
                </p>
            </div>
            """, 
            unsafe_allow_html=True
        )

def main():
    """Funci√≥n principal"""
    inicializar_session_state()
    
    mostrar_header()
    mostrar_sidebar()
    
    tab1, tab2, tab3 = st.tabs([
        "üè† Tasaci√≥n Individual", 
        "üìÅ Tasaci√≥n por Lotes", 
        "üìö Documentaci√≥n T√©cnica"
    ])
    
    with tab1:
        pagina_tasacion_individual()
    
    with tab2:
        pagina_tasacion_multiple()
    
    with tab3:
        pagina_documentacion()
    
    mostrar_footer()

if __name__ == "__main__":
    main()